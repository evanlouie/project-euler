// Compiled by ClojureScript 1.10.238 {:static-fns true, :optimize-constants true}
goog.provide('project_euler.core');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('reagent.core');
goog.require('cljs.pprint');
goog.require('euler.problems');
goog.require('cljs.core.async');
cljs.core.enable_console_print_BANG_();
project_euler.core.fetch = (function project_euler$core$fetch(url,callback){
return window.fetch(url).then((function (p1__34328_SHARP_){
return p1__34328_SHARP_.text();
})).then((function (p1__34329_SHARP_){
return (callback.cljs$core$IFn$_invoke$arity$1 ? callback.cljs$core$IFn$_invoke$arity$1(p1__34329_SHARP_) : callback.call(null,p1__34329_SHARP_));
})).catch((function (err){
return console.error(err);
}));
});
project_euler.core.work = (function project_euler$core$work(){
var c = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
project_euler.core.fetch("/",((function (c){
return (function (p1__34330_SHARP_){
var c__30842__auto__ = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));
cljs.core.async.impl.dispatch.run(((function (c__30842__auto__,c){
return (function (){
var f__30843__auto__ = (function (){var switch__30740__auto__ = ((function (c__30842__auto__,c){
return (function (state_34334){
var state_val_34335 = (state_34334[(1)]);
if((state_val_34335 === (1))){
var state_34334__$1 = state_34334;
return cljs.core.async.impl.ioc_helpers.put_BANG_(state_34334__$1,(2),c,p1__34330_SHARP_);
} else {
if((state_val_34335 === (2))){
var inst_34332 = (state_34334[(2)]);
var state_34334__$1 = state_34334;
return cljs.core.async.impl.ioc_helpers.return_chan(state_34334__$1,inst_34332);
} else {
return null;
}
}
});})(c__30842__auto__,c))
;
return ((function (switch__30740__auto__,c__30842__auto__,c){
return (function() {
var project_euler$core$work_$_state_machine__30741__auto__ = null;
var project_euler$core$work_$_state_machine__30741__auto____0 = (function (){
var statearr_34336 = [null,null,null,null,null,null,null];
(statearr_34336[(0)] = project_euler$core$work_$_state_machine__30741__auto__);

(statearr_34336[(1)] = (1));

return statearr_34336;
});
var project_euler$core$work_$_state_machine__30741__auto____1 = (function (state_34334){
while(true){
var ret_value__30742__auto__ = (function (){try{while(true){
var result__30743__auto__ = switch__30740__auto__(state_34334);
if(cljs.core.keyword_identical_QMARK_(result__30743__auto__,cljs.core.cst$kw$recur)){
continue;
} else {
return result__30743__auto__;
}
break;
}
}catch (e34337){if((e34337 instanceof Object)){
var ex__30744__auto__ = e34337;
var statearr_34338_34340 = state_34334;
(statearr_34338_34340[(5)] = ex__30744__auto__);


cljs.core.async.impl.ioc_helpers.process_exception(state_34334);

return cljs.core.cst$kw$recur;
} else {
throw e34337;

}
}})();
if(cljs.core.keyword_identical_QMARK_(ret_value__30742__auto__,cljs.core.cst$kw$recur)){
var G__34341 = state_34334;
state_34334 = G__34341;
continue;
} else {
return ret_value__30742__auto__;
}
break;
}
});
project_euler$core$work_$_state_machine__30741__auto__ = function(state_34334){
switch(arguments.length){
case 0:
return project_euler$core$work_$_state_machine__30741__auto____0.call(this);
case 1:
return project_euler$core$work_$_state_machine__30741__auto____1.call(this,state_34334);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
project_euler$core$work_$_state_machine__30741__auto__.cljs$core$IFn$_invoke$arity$0 = project_euler$core$work_$_state_machine__30741__auto____0;
project_euler$core$work_$_state_machine__30741__auto__.cljs$core$IFn$_invoke$arity$1 = project_euler$core$work_$_state_machine__30741__auto____1;
return project_euler$core$work_$_state_machine__30741__auto__;
})()
;})(switch__30740__auto__,c__30842__auto__,c))
})();
var state__30844__auto__ = (function (){var statearr_34339 = (f__30843__auto__.cljs$core$IFn$_invoke$arity$0 ? f__30843__auto__.cljs$core$IFn$_invoke$arity$0() : f__30843__auto__.call(null));
(statearr_34339[(6)] = c__30842__auto__);

return statearr_34339;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__30844__auto__);
});})(c__30842__auto__,c))
);

return c__30842__auto__;
});})(c))
);

return c;
});
if(typeof project_euler.core.app_state !== 'undefined'){
} else {
project_euler.core.app_state = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Hello world!"], null));
}
project_euler.core.print_list = (function project_euler$core$print_list(list){
return cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (list_item){
cljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([list_item], 0));

return list_item;
}),list);
});
project_euler.core.euler_problem = (function project_euler$core$euler_problem(problem_number,short_name,p__34342,answer){
var map__34343 = p__34342;
var map__34343__$1 = ((((!((map__34343 == null)))?(((((map__34343.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34343.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34343):map__34343);
var meta = map__34343__$1;
var question = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34343__$1,cljs.core.cst$kw$doc);
var namespace = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34343__$1,cljs.core.cst$kw$ns);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34343__$1,cljs.core.cst$kw$name);
var export$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34343__$1,cljs.core.cst$kw$export);
var answer_value = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(null);
var working_QMARK_ = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(false);
var code = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(null);
var log = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);
var expanded = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(false);
return ((function (answer_value,working_QMARK_,code,log,expanded,map__34343,map__34343__$1,meta,question,namespace,name,export$){
return (function (){
var max_question_lines = (20);
var should_truncate_question = (cljs.core.count(clojure.string.split_lines(question)) > max_question_lines);
return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$article$euler_problem$question,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$overflow,cljs.core.cst$kw$hidden,cljs.core.cst$kw$flex,"1 1 400px",cljs.core.cst$kw$margin,"0 1em"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div$meta,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$margin_DASH_bottom,(0)], null)], null),short_name], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$href,["https://projecteuler.net/problem=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(problem_number)].join(''),cljs.core.cst$kw$target,cljs.core.cst$kw$_blank], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h4,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$margin_DASH_top,(0)], null)], null),["Problem ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(problem_number)].join('')], null)], null)], null),(cljs.core.truth_(export$)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$figcaption$instructions,["Function: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.replace([cljs.core.str.cljs$core$IFn$_invoke$arity$1(namespace),".",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),/-/,"_"))].join('')], null):null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre$question_text,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$font_DASH_family,cljs.core.cst$kw$serif,cljs.core.cst$kw$color,cljs.core.cst$kw$_SHARP_666,cljs.core.cst$kw$white_DASH_space,cljs.core.cst$kw$pre_DASH_wrap,cljs.core.cst$kw$word_DASH_wrap,cljs.core.cst$kw$break_DASH_word,cljs.core.cst$kw$overflow,cljs.core.cst$kw$scroll,cljs.core.cst$kw$max_DASH_height,(cljs.core.truth_(cljs.core.deref(expanded))?"100%":"20em")], null)], null),clojure.string.join.cljs$core$IFn$_invoke$arity$2("\n",cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.string.trim,clojure.string.split_lines(question)))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$details,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$summary,"Show JS"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$white_DASH_space,cljs.core.cst$kw$pre_DASH_wrap,cljs.core.cst$kw$word_DASH_wrap,cljs.core.cst$kw$break_DASH_word,cljs.core.cst$kw$overflow,cljs.core.cst$kw$hidden], null)], null),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(answer)].join('')], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div$controls,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$button,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$disabled,cljs.core.deref(working_QMARK_),cljs.core.cst$kw$on_DASH_click,((function (max_question_lines,should_truncate_question,answer_value,working_QMARK_,code,log,expanded,map__34343,map__34343__$1,meta,question,namespace,name,export$){
return (function (){
cljs.core.reset_BANG_(working_QMARK_,true);

cljs.core.reset_BANG_(answer_value,(function (){var start__4389__auto__ = cljs.core.system_time();
var ret__4390__auto__ = (answer.cljs$core$IFn$_invoke$arity$0 ? answer.cljs$core$IFn$_invoke$arity$0() : answer.call(null));
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["Elapsed time: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.system_time() - start__4389__auto__).toFixed((6)))," msecs"].join('')], 0));

return ret__4390__auto__;
})());

return cljs.core.reset_BANG_(working_QMARK_,false);
});})(max_question_lines,should_truncate_question,answer_value,working_QMARK_,code,log,expanded,map__34343,map__34343__$1,meta,question,namespace,name,export$))
], null),((cljs.core.deref(working_QMARK_) === true)?"Working...":"Answer"
)], null),((!((cljs.core.deref(answer_value) == null)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code,":",cljs.core.deref(answer_value)], null):null)], null)], null)], null);
});
;})(answer_value,working_QMARK_,code,log,expanded,map__34343,map__34343__$1,meta,question,namespace,name,export$))
});
project_euler.core.euler = (function project_euler$core$euler(){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$details,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$summary,"README"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"These solutions are written in ClojureScript and compiled using the Google Closure Compiler. So understanding the actual JavaScript source is near impossible."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code,"Function: <global_var>"], null)," names the variable which binds to the solution code. Source-Maps are available for all answers, so you can inspect those variables in your inspector to see the uncompiled ClojureScript source."], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div$questions,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$display,cljs.core.cst$kw$flex,cljs.core.cst$kw$flex_DASH_wrap,cljs.core.cst$kw$wrap,cljs.core.cst$kw$justify_DASH_content,cljs.core.cst$kw$space_DASH_between,cljs.core.cst$kw$margin,"0 -1em"], null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(1),"Multiples of 3 and 5",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_1;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_1,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_1,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,4,4,cljs.core.list(cljs.core.PersistentVector.EMPTY),"If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\n  Find the sum of all the multiples of 3 or 5 below 1000.",(cljs.core.truth_(euler.problems.problem_1)?euler.problems.problem_1.cljs$lang$test:null)]))),euler.problems.problem_1], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(2),"Even Fibonacci numbers",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_2;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_2,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_2,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,15,15,cljs.core.list(cljs.core.PersistentVector.EMPTY),"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",(cljs.core.truth_(euler.problems.problem_2)?euler.problems.problem_2.cljs$lang$test:null)]))),euler.problems.problem_2], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(3),"Largest prime factor",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_3;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_3,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_3,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,30,30,cljs.core.list(cljs.core.PersistentVector.EMPTY),"The prime factors of 13195 are 5, 7, 13 and 29.\n\n  What is the largest prime factor of the number 600851475143 ?",(cljs.core.truth_(euler.problems.problem_3)?euler.problems.problem_3.cljs$lang$test:null)]))),euler.problems.problem_3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(4),"Largest palindrome product",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_4;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_4,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_4,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,47,47,cljs.core.list(cljs.core.PersistentVector.EMPTY),"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00D7 99.\n\n  Find the largest palindrome made from the product of two 3-digit numbers.",(cljs.core.truth_(euler.problems.problem_4)?euler.problems.problem_4.cljs$lang$test:null)]))),euler.problems.problem_4], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(5),"Smallest multiple",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_5;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_5,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_5,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,69,69,cljs.core.list(cljs.core.PersistentVector.EMPTY),"2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?",(cljs.core.truth_(euler.problems.problem_5)?euler.problems.problem_5.cljs$lang$test:null)]))),euler.problems.problem_5], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(6),"Sum square difference",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_6;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_6,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_6,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,81,81,cljs.core.list(cljs.core.PersistentVector.EMPTY),"The sum of the squares of the first ten natural numbers is,\n\n  1^2 + 2^2 + ... + 102 = 385\n  The square of the sum of the first ten natural numbers is,\n\n  (1 + 2 + ... + 10)^2 = 55^2 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 \u2212 385 = 2640.\n\n  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.",(cljs.core.truth_(euler.problems.problem_6)?euler.problems.problem_6.cljs$lang$test:null)]))),euler.problems.problem_6], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(7),"10001st prime",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_7;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_7,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_7,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,103,103,cljs.core.list(cljs.core.PersistentVector.EMPTY),"By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\n  What is the 10 001st prime number?",(cljs.core.truth_(euler.problems.problem_7)?euler.problems.problem_7.cljs$lang$test:null)]))),euler.problems.problem_7], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(8),"Largest product in a series",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_8;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_8,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_8,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,119,119,cljs.core.list(cljs.core.PersistentVector.EMPTY),"The four adjacent digits in the 1000-digit number that have the greatest product are 9 \u00D7 9 \u00D7 8 \u00D7 9 = 5832.\n\n  73167176531330624919225119674426574742355349194934\n  96983520312774506326239578318016984801869478851843\n  85861560789112949495459501737958331952853208805511\n  12540698747158523863050715693290963295227443043557\n  66896648950445244523161731856403098711121722383113\n  62229893423380308135336276614282806444486645238749\n  30358907296290491560440772390713810515859307960866\n  70172427121883998797908792274921901699720888093776\n  65727333001053367881220235421809751254540594752243\n  52584907711670556013604839586446706324415722155397\n  53697817977846174064955149290862569321978468622482\n  83972241375657056057490261407972968652414535100474\n  82166370484403199890008895243450658541227588666881\n  16427171479924442928230863465674813919123162824586\n  17866458359124566529476545682848912883142607690042\n  24219022671055626321111109370544217506941658960408\n  07198403850962455444362981230987879927244284909188\n  84580156166097919133875499200524063689912560717606\n  05886116467109405077541002256983155200055935729725\n  71636269561882670428252483600823257530420752963450\n\n  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?",(cljs.core.truth_(euler.problems.problem_8)?euler.problems.problem_8.cljs$lang$test:null)]))),euler.problems.problem_8], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(9),"Special Pythagorean triplet",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_9;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_9,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_9,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",25,true,1,153,153,cljs.core.list(cljs.core.PersistentVector.EMPTY),"A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n  a^2 + b^2 = c^2\n  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\n  There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n  Find the product abc.",(cljs.core.truth_(euler.problems.problem_9)?euler.problems.problem_9.cljs$lang$test:null)]))),euler.problems.problem_9], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(10),"Summation of primes",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_10;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_10,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_10,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",26,true,1,183,183,cljs.core.list(cljs.core.PersistentVector.EMPTY),"The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\n  Find the sum of all the primes below two million.",(cljs.core.truth_(euler.problems.problem_10)?euler.problems.problem_10.cljs$lang$test:null)]))),euler.problems.problem_10], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(11),"Largest product in a grid",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_11;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_11,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_11,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",26,true,1,213,213,cljs.core.list(cljs.core.PersistentVector.EMPTY),"In the 20\u00D720 grid below, four numbers along a diagonal line have been marked in red.\n\n  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n\n  The product of these numbers is 26 \u00D7 63 \u00D7 78 \u00D7 14 = 1788696.\n\n  What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20\u00D720 grid?",(cljs.core.truth_(euler.problems.problem_11)?euler.problems.problem_11.cljs$lang$test:null)]))),euler.problems.problem_11], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(12),"Highly divisible triangular number",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_12;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_12,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_12,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",26,true,1,278,278,cljs.core.list(cljs.core.PersistentVector.EMPTY),"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\n  Let us list the factors of the first seven triangle numbers:\n\n  1: 1\n  3: 1,3\n  6: 1,2,3,6\n  10: 1,2,5,10\n  15: 1,3,5,15\n  21: 1,3,7,21\n  28: 1,2,4,7,14,28\n  We can see that 28 is the first triangle number to have over five divisors.\n\n  What is the value of the first triangle number to have over five hundred divisors?",(cljs.core.truth_(euler.problems.problem_12)?euler.problems.problem_12.cljs$lang$test:null)]))),euler.problems.problem_12], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(13),"Large Sum",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_13;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_13,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_13,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",26,true,1,315,315,cljs.core.list(cljs.core.PersistentVector.EMPTY),"Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n  37107287533902102798797998220837590246510135740250\n  46376937677490009712648124896970078050417018260538\n  74324986199524741059474233309513058123726617309629\n  91942213363574161572522430563301811072406154908250\n  23067588207539346171171980310421047513778063246676\n  89261670696623633820136378418383684178734361726757\n  28112879812849979408065481931592621691275889832738\n  44274228917432520321923589422876796487670272189318\n  47451445736001306439091167216856844588711603153276\n  70386486105843025439939619828917593665686757934951\n  62176457141856560629502157223196586755079324193331\n  64906352462741904929101432445813822663347944758178\n  92575867718337217661963751590579239728245598838407\n  58203565325359399008402633568948830189458628227828\n  80181199384826282014278194139940567587151170094390\n  35398664372827112653829987240784473053190104293586\n  86515506006295864861532075273371959191420517255829\n  71693888707715466499115593487603532921714970056938\n  54370070576826684624621495650076471787294438377604\n  53282654108756828443191190634694037855217779295145\n  36123272525000296071075082563815656710885258350721\n  45876576172410976447339110607218265236877223636045\n  17423706905851860660448207621209813287860733969412\n  81142660418086830619328460811191061556940512689692\n  51934325451728388641918047049293215058642563049483\n  62467221648435076201727918039944693004732956340691\n  15732444386908125794514089057706229429197107928209\n  55037687525678773091862540744969844508330393682126\n  18336384825330154686196124348767681297534375946515\n  80386287592878490201521685554828717201219257766954\n  78182833757993103614740356856449095527097864797581\n  16726320100436897842553539920931837441497806860984\n  48403098129077791799088218795327364475675590848030\n  87086987551392711854517078544161852424320693150332\n  59959406895756536782107074926966537676326235447210\n  69793950679652694742597709739166693763042633987085\n  41052684708299085211399427365734116182760315001271\n  65378607361501080857009149939512557028198746004375\n  35829035317434717326932123578154982629742552737307\n  94953759765105305946966067683156574377167401875275\n  88902802571733229619176668713819931811048770190271\n  25267680276078003013678680992525463401061632866526\n  36270218540497705585629946580636237993140746255962\n  24074486908231174977792365466257246923322810917141\n  91430288197103288597806669760892938638285025333403\n  34413065578016127815921815005561868836468420090470\n  23053081172816430487623791969842487255036638784583\n  11487696932154902810424020138335124462181441773470\n  63783299490636259666498587618221225225512486764533\n  67720186971698544312419572409913959008952310058822\n  95548255300263520781532296796249481641953868218774\n  76085327132285723110424803456124867697064507995236\n  37774242535411291684276865538926205024910326572967\n  23701913275725675285653248258265463092207058596522\n  29798860272258331913126375147341994889534765745501\n  18495701454879288984856827726077713721403798879715\n  38298203783031473527721580348144513491373226651381\n  34829543829199918180278916522431027392251122869539\n  40957953066405232632538044100059654939159879593635\n  29746152185502371307642255121183693803580388584903\n  41698116222072977186158236678424689157993532961922\n  62467957194401269043877107275048102390895523597457\n  23189706772547915061505504953922979530901129967519\n  86188088225875314529584099251203829009407770775672\n  11306739708304724483816533873502340845647058077308\n  82959174767140363198008187129011875491310547126581\n  97623331044818386269515456334926366572897563400500\n  42846280183517070527831839425882145521227251250327\n  55121603546981200581762165212827652751691296897789\n  32238195734329339946437501907836945765883352399886\n  75506164965184775180738168837861091527357929701337\n  62177842752192623401942399639168044983993173312731\n  32924185707147349566916674687634660915035914677504\n  99518671430235219628894890102423325116913619626622\n  73267460800591547471830798392868535206946944540724\n  76841822524674417161514036427982273348055556214818\n  97142617910342598647204516893989422179826088076852\n  87783646182799346313767754307809363333018982642090\n  10848802521674670883215120185883543223812876952786\n  71329612474782464538636993009049310363619763878039\n  62184073572399794223406235393808339651327408011116\n  66627891981488087797941876876144230030984490851411\n  60661826293682836764744779239180335110989069790714\n  85786944089552990653640447425576083659976645795096\n  66024396409905389607120198219976047599490197230297\n  64913982680032973156037120041377903785566085089252\n  16730939319872750275468906903707539413042652315011\n  94809377245048795150954100921645863754710598436791\n  78639167021187492431995700641917969777599028300699\n  15368713711936614952811305876380278410754449733078\n  40789923115535562561142322423255033685442488917353\n  44889911501440648020369068063960672322193204149535\n  41503128880339536053299340368006977710650566631954\n  81234880673210146739058568557934581403627822703280\n  82616570773948327592232845941706525094512325230608\n  22918802058777319719839450180888072429661980811197\n  77158542502016545090413245809786882778948721859617\n  72107838435069186155435662884062257473692284509516\n  20849603980134001723930671666823555245252804609722\n  53503534226472524250874054075591789781264330331690\n  ",(cljs.core.truth_(euler.problems.problem_13)?euler.problems.problem_13.cljs$lang$test:null)]))),euler.problems.problem_13], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler_problem,(14),"Longest Collatz sequence",cljs.core.meta(new cljs.core.Var(function(){return euler.problems.problem_14;},cljs.core.cst$sym$euler$problems_SLASH_problem_DASH_14,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$export,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$euler$problems,cljs.core.cst$sym$problem_DASH_14,"/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs",26,true,1,447,447,cljs.core.list(cljs.core.PersistentVector.EMPTY),"The following iterative sequence is defined for the set of positive integers:\n\n  n \u2192 n/2 (n is even)\n  n \u2192 3n + 1 (n is odd)\n\n  Using the rule above and starting with 13, we generate the following sequence:\n\n  13 \u2192 40 \u2192 20 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1\n  It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\n\n  Which starting number, under one million, produces the longest chain?\n\n  NOTE: Once the chain starts the terms are allowed to go above one million.",(cljs.core.truth_(euler.problems.problem_14)?euler.problems.problem_14.cljs$lang$test:null)]))),euler.problems.problem_14], null)], null)], null);
});
var G__34345_34347 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [project_euler.core.euler], null);
var G__34346_34348 = document.getElementById("app");
(reagent.core.render_component.cljs$core$IFn$_invoke$arity$2 ? reagent.core.render_component.cljs$core$IFn$_invoke$arity$2(G__34345_34347,G__34346_34348) : reagent.core.render_component.call(null,G__34345_34347,G__34346_34348));
project_euler.core.on_js_reload = (function project_euler$core$on_js_reload(){
console.clear();

console.clear(null);

return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Hey there~!"], 0));
});
