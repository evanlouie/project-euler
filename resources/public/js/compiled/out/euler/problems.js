// Compiled by ClojureScript 1.9.946 {}
goog.provide('euler.problems');
goog.require('cljs.core');
goog.require('clojure.string');
/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 *   Find the sum of all the multiples of 3 or 5 below 1000.
 */
euler.problems.problem_1 = (function euler$problems$problem_1(){
return cljs.core.reduce.call(null,cljs.core._PLUS_,(function (){var iter__30978__auto__ = (function euler$problems$problem_1_$_iter__48316(s__48317){
return (new cljs.core.LazySeq(null,(function (){
var s__48317__$1 = s__48317;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48317__$1);
if(temp__5457__auto__){
var s__48317__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48317__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48317__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48319 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48318 = (0);
while(true){
if((i__48318 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48318);
if(((cljs.core.mod.call(null,x,(3)) === (0))) || ((cljs.core.mod.call(null,x,(5)) === (0)))){
cljs.core.chunk_append.call(null,b__48319,x);

var G__48320 = (i__48318 + (1));
i__48318 = G__48320;
continue;
} else {
var G__48321 = (i__48318 + (1));
i__48318 = G__48321;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48319),euler$problems$problem_1_$_iter__48316.call(null,cljs.core.chunk_rest.call(null,s__48317__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48319),null);
}
} else {
var x = cljs.core.first.call(null,s__48317__$2);
if(((cljs.core.mod.call(null,x,(3)) === (0))) || ((cljs.core.mod.call(null,x,(5)) === (0)))){
return cljs.core.cons.call(null,x,euler$problems$problem_1_$_iter__48316.call(null,cljs.core.rest.call(null,s__48317__$2)));
} else {
var G__48322 = cljs.core.rest.call(null,s__48317__$2);
s__48317__$1 = G__48322;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null,(1000)));
})());
});
goog.exportSymbol('euler.problems.problem_1', euler.problems.problem_1);
/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *   By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
euler.problems.problem_2 = (function euler$problems$problem_2(){
var fib = (function() {
var euler$problems$problem_2_$_fib = null;
var euler$problems$problem_2_$_fib__1 = (function (n){
return euler$problems$problem_2_$_fib.call(null,n,(0),(1));
});
var euler$problems$problem_2_$_fib__3 = (function (n,x,y){
while(true){
var pred__48326 = cljs.core._EQ_;
var expr__48327 = n;
if(cljs.core.truth_(pred__48326.call(null,(0),expr__48327))){
return x;
} else {
if(cljs.core.truth_(pred__48326.call(null,(1),expr__48327))){
return y;
} else {
var G__48333 = (n - (1));
var G__48334 = y;
var G__48335 = (x + y);
n = G__48333;
x = G__48334;
y = G__48335;
continue;
}
}
break;
}
});
euler$problems$problem_2_$_fib = function(n,x,y){
switch(arguments.length){
case 1:
return euler$problems$problem_2_$_fib__1.call(this,n);
case 3:
return euler$problems$problem_2_$_fib__3.call(this,n,x,y);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_2_$_fib.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_2_$_fib__1;
euler$problems$problem_2_$_fib.cljs$core$IFn$_invoke$arity$3 = euler$problems$problem_2_$_fib__3;
return euler$problems$problem_2_$_fib;
})()
;
return cljs.core.reduce.call(null,cljs.core._PLUS_,(function (){var iter__30978__auto__ = (function euler$problems$problem_2_$_iter__48329(s__48330){
return (new cljs.core.LazySeq(null,(function (){
var s__48330__$1 = s__48330;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48330__$1);
if(temp__5457__auto__){
var s__48330__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48330__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48330__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48332 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48331 = (0);
while(true){
if((i__48331 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48331);
var fibn = fib.call(null,x);
if(cljs.core.even_QMARK_.call(null,fibn)){
if((fibn < (4000000))){
cljs.core.chunk_append.call(null,b__48332,fibn);

var G__48336 = (i__48331 + (1));
i__48331 = G__48336;
continue;
} else {
return null;
}
} else {
var G__48337 = (i__48331 + (1));
i__48331 = G__48337;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48332),euler$problems$problem_2_$_iter__48329.call(null,cljs.core.chunk_rest.call(null,s__48330__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48332),null);
}
} else {
var x = cljs.core.first.call(null,s__48330__$2);
var fibn = fib.call(null,x);
if(cljs.core.even_QMARK_.call(null,fibn)){
if((fibn < (4000000))){
return cljs.core.cons.call(null,fibn,euler$problems$problem_2_$_iter__48329.call(null,cljs.core.rest.call(null,s__48330__$2)));
} else {
return null;
}
} else {
var G__48338 = cljs.core.rest.call(null,s__48330__$2);
s__48330__$1 = G__48338;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null));
})());
});
goog.exportSymbol('euler.problems.problem_2', euler.problems.problem_2);
/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 *   What is the largest prime factor of the number 600851475143 ?
 */
euler.problems.problem_3 = (function euler$problems$problem_3(){
var multiple_QMARK_ = (function euler$problems$problem_3_$_multiple_QMARK_(n,div){
return (cljs.core.mod.call(null,n,div) === (0));
});
var prime_factors = (function() {
var euler$problems$problem_3_$_prime_factors = null;
var euler$problems$problem_3_$_prime_factors__1 = (function (n){
return euler$problems$problem_3_$_prime_factors.call(null,n,(2),cljs.core.List.EMPTY);
});
var euler$problems$problem_3_$_prime_factors__3 = (function (n,candidate,acc){
while(true){
if((n <= (1))){
return cljs.core.reverse.call(null,acc);
} else {
if(cljs.core.truth_(multiple_QMARK_.call(null,n,candidate))){
var G__48339 = (n / candidate);
var G__48340 = candidate;
var G__48341 = cljs.core.cons.call(null,candidate,acc);
n = G__48339;
candidate = G__48340;
acc = G__48341;
continue;
} else {
var G__48342 = n;
var G__48343 = (candidate + (1));
var G__48344 = acc;
n = G__48342;
candidate = G__48343;
acc = G__48344;
continue;

}
}
break;
}
});
euler$problems$problem_3_$_prime_factors = function(n,candidate,acc){
switch(arguments.length){
case 1:
return euler$problems$problem_3_$_prime_factors__1.call(this,n);
case 3:
return euler$problems$problem_3_$_prime_factors__3.call(this,n,candidate,acc);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_3_$_prime_factors__1;
euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$3 = euler$problems$problem_3_$_prime_factors__3;
return euler$problems$problem_3_$_prime_factors;
})()
;
return cljs.core.apply.call(null,cljs.core.max,prime_factors.call(null,(600851475143)));
});
goog.exportSymbol('euler.problems.problem_3', euler.problems.problem_3);
/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
 *   Find the largest palindrome made from the product of two 3-digit numbers.
 */
euler.problems.problem_4 = (function euler$problems$problem_4(){
var palindrome_QMARK_ = (function euler$problems$problem_4_$_palindrome_QMARK_(num){
return cljs.core._EQ_.call(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(num)].join(''),cljs.core.apply.call(null,cljs.core.str,cljs.core.reverse.call(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(num)].join(''))));
});
return cljs.core.apply.call(null,cljs.core.max,(function (){var iter__30978__auto__ = (function euler$problems$problem_4_$_iter__48345(s__48346){
return (new cljs.core.LazySeq(null,(function (){
var s__48346__$1 = s__48346;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48346__$1);
if(temp__5457__auto__){
var xs__6012__auto__ = temp__5457__auto__;
var x = cljs.core.first.call(null,xs__6012__auto__);
var iterys__30974__auto__ = ((function (s__48346__$1,x,xs__6012__auto__,temp__5457__auto__){
return (function euler$problems$problem_4_$_iter__48345_$_iter__48347(s__48348){
return (new cljs.core.LazySeq(null,((function (s__48346__$1,x,xs__6012__auto__,temp__5457__auto__){
return (function (){
var s__48348__$1 = s__48348;
while(true){
var temp__5457__auto____$1 = cljs.core.seq.call(null,s__48348__$1);
if(temp__5457__auto____$1){
var s__48348__$2 = temp__5457__auto____$1;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48348__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48348__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48350 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48349 = (0);
while(true){
if((i__48349 < size__30977__auto__)){
var y = cljs.core._nth.call(null,c__30976__auto__,i__48349);
var product = (x * y);
if(cljs.core.truth_(palindrome_QMARK_.call(null,product))){
cljs.core.chunk_append.call(null,b__48350,product);

var G__48351 = (i__48349 + (1));
i__48349 = G__48351;
continue;
} else {
var G__48352 = (i__48349 + (1));
i__48349 = G__48352;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48350),euler$problems$problem_4_$_iter__48345_$_iter__48347.call(null,cljs.core.chunk_rest.call(null,s__48348__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48350),null);
}
} else {
var y = cljs.core.first.call(null,s__48348__$2);
var product = (x * y);
if(cljs.core.truth_(palindrome_QMARK_.call(null,product))){
return cljs.core.cons.call(null,product,euler$problems$problem_4_$_iter__48345_$_iter__48347.call(null,cljs.core.rest.call(null,s__48348__$2)));
} else {
var G__48353 = cljs.core.rest.call(null,s__48348__$2);
s__48348__$1 = G__48353;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__48346__$1,x,xs__6012__auto__,temp__5457__auto__))
,null,null));
});})(s__48346__$1,x,xs__6012__auto__,temp__5457__auto__))
;
var fs__30975__auto__ = cljs.core.seq.call(null,iterys__30974__auto__.call(null,cljs.core.range.call(null,(1000))));
if(fs__30975__auto__){
return cljs.core.concat.call(null,fs__30975__auto__,euler$problems$problem_4_$_iter__48345.call(null,cljs.core.rest.call(null,s__48346__$1)));
} else {
var G__48354 = cljs.core.rest.call(null,s__48346__$1);
s__48346__$1 = G__48354;
continue;
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null,(1000)));
})());
});
goog.exportSymbol('euler.problems.problem_4', euler.problems.problem_4);
/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 *   What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
euler.problems.problem_5 = (function euler$problems$problem_5(){
var factors = (function (n){
return cljs.core.into.call(null,cljs.core.sorted_set.call(null),cljs.core.reduce.call(null,cljs.core.concat,(function (){var iter__30978__auto__ = (function euler$problems$problem_5_$_iter__48355(s__48356){
return (new cljs.core.LazySeq(null,(function (){
var s__48356__$1 = s__48356;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48356__$1);
if(temp__5457__auto__){
var s__48356__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48356__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48356__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48358 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48357 = (0);
while(true){
if((i__48357 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48357);
if((cljs.core.rem.call(null,n,x) === (0))){
cljs.core.chunk_append.call(null,b__48358,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null));

var G__48363 = (i__48357 + (1));
i__48357 = G__48363;
continue;
} else {
var G__48364 = (i__48357 + (1));
i__48357 = G__48364;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48358),euler$problems$problem_5_$_iter__48355.call(null,cljs.core.chunk_rest.call(null,s__48356__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48358),null);
}
} else {
var x = cljs.core.first.call(null,s__48356__$2);
if((cljs.core.rem.call(null,n,x) === (0))){
return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null),euler$problems$problem_5_$_iter__48355.call(null,cljs.core.rest.call(null,s__48356__$2)));
} else {
var G__48365 = cljs.core.rest.call(null,s__48356__$2);
s__48356__$1 = G__48365;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null,(1),(Math.sqrt(n) + (1))));
})()));
});
var prime_QMARK_ = cljs.core.memoize.call(null,((function (factors){
return (function (n){
return (cljs.core.count.call(null,factors.call(null,n)) === (0));
});})(factors))
);
var primes = (function (){var iter__30978__auto__ = ((function (factors,prime_QMARK_){
return (function euler$problems$problem_5_$_iter__48359(s__48360){
return (new cljs.core.LazySeq(null,((function (factors,prime_QMARK_){
return (function (){
var s__48360__$1 = s__48360;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48360__$1);
if(temp__5457__auto__){
var s__48360__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48360__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48360__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48362 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48361 = (0);
while(true){
if((i__48361 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48361);
if(cljs.core.truth_(prime_QMARK_.call(null))){
cljs.core.chunk_append.call(null,b__48362,x);

var G__48366 = (i__48361 + (1));
i__48361 = G__48366;
continue;
} else {
var G__48367 = (i__48361 + (1));
i__48361 = G__48367;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48362),euler$problems$problem_5_$_iter__48359.call(null,cljs.core.chunk_rest.call(null,s__48360__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48362),null);
}
} else {
var x = cljs.core.first.call(null,s__48360__$2);
if(cljs.core.truth_(prime_QMARK_.call(null))){
return cljs.core.cons.call(null,x,euler$problems$problem_5_$_iter__48359.call(null,cljs.core.rest.call(null,s__48360__$2)));
} else {
var G__48368 = cljs.core.rest.call(null,s__48360__$2);
s__48360__$1 = G__48368;
continue;
}
}
} else {
return null;
}
break;
}
});})(factors,prime_QMARK_))
,null,null));
});})(factors,prime_QMARK_))
;
return iter__30978__auto__.call(null,cljs.core.range.call(null));
})();
var set_upto = cljs.core.memoize.call(null,((function (factors,prime_QMARK_,primes){
return (function (n){
return cljs.core.into.call(null,cljs.core.sorted_set.call(null),cljs.core.range.call(null,(1),(n + (1))));
});})(factors,prime_QMARK_,primes))
);
var divisible_upto_QMARK_ = ((function (factors,prime_QMARK_,primes,set_upto){
return (function (divisor,n){
return cljs.core.every_QMARK_.call(null,cljs.core.partial.call(null,cljs.core.contains_QMARK_,factors.call(null,n)),set_upto.call(null,divisor));
});})(factors,prime_QMARK_,primes,set_upto))
;
return cljs.core.first.call(null,cljs.core.filter.call(null,cljs.core.partial.call(null,divisible_upto_QMARK_,(20)),cljs.core.map.call(null,((function (factors,prime_QMARK_,primes,set_upto,divisible_upto_QMARK_){
return (function (n){
cljs.core.println.call(null,n);

return n;
});})(factors,prime_QMARK_,primes,set_upto,divisible_upto_QMARK_))
,cljs.core.iterate.call(null,cljs.core.partial.call(null,cljs.core._PLUS_,(20)),(20)))));
});
goog.exportSymbol('euler.problems.problem_5', euler.problems.problem_5);
/**
 * The sum of the squares of the first ten natural numbers is,
 *   12 + 22 + ... + 102 = 385
 *   The square of the sum of the first ten natural numbers is,
 *   (1 + 2 + ... + 10)2 = 552 = 3025
 *   Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.
 *   Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
euler.problems.problem_6 = (function euler$problems$problem_6(){
var sum_of_squares = (function euler$problems$problem_6_$_sum_of_squares(up_to){
return cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.map.call(null,(function (n){
return (n * n);
}),cljs.core.range.call(null,(1),(up_to + (1)))));
});
var square_of_sum = (function euler$problems$problem_6_$_square_of_sum(up_to){
return Math.pow(cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.range.call(null,(1),(up_to + (1)))),(2));
});
return (square_of_sum.call(null,(100)) - sum_of_squares.call(null,(100)));
});
goog.exportSymbol('euler.problems.problem_6', euler.problems.problem_6);
/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 *   What is the 10 001st prime number?
 */
euler.problems.problem_7 = (function euler$problems$problem_7(){
var isPrime_QMARK_ = (function() {
var euler$problems$problem_7_$_isPrime_QMARK_ = null;
var euler$problems$problem_7_$_isPrime_QMARK___1 = (function (n){
return euler$problems$problem_7_$_isPrime_QMARK_.call(null,n,(2));
});
var euler$problems$problem_7_$_isPrime_QMARK___2 = (function (n,start){
while(true){
if((start > Math.sqrt(n))){
return (n > (1));
} else {
if((cljs.core.mod.call(null,n,start) < (1))){
return false;
} else {
var G__48373 = n;
var G__48374 = (start + (1));
n = G__48373;
start = G__48374;
continue;

}
}
break;
}
});
euler$problems$problem_7_$_isPrime_QMARK_ = function(n,start){
switch(arguments.length){
case 1:
return euler$problems$problem_7_$_isPrime_QMARK___1.call(this,n);
case 2:
return euler$problems$problem_7_$_isPrime_QMARK___2.call(this,n,start);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_7_$_isPrime_QMARK_.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_7_$_isPrime_QMARK___1;
euler$problems$problem_7_$_isPrime_QMARK_.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_7_$_isPrime_QMARK___2;
return euler$problems$problem_7_$_isPrime_QMARK_;
})()
;
return cljs.core.last.call(null,cljs.core.take.call(null,(10001),(function (){var iter__30978__auto__ = (function euler$problems$problem_7_$_iter__48369(s__48370){
return (new cljs.core.LazySeq(null,(function (){
var s__48370__$1 = s__48370;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48370__$1);
if(temp__5457__auto__){
var s__48370__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48370__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48370__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48372 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48371 = (0);
while(true){
if((i__48371 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48371);
if(cljs.core.truth_(isPrime_QMARK_.call(null,x))){
cljs.core.chunk_append.call(null,b__48372,x);

var G__48375 = (i__48371 + (1));
i__48371 = G__48375;
continue;
} else {
var G__48376 = (i__48371 + (1));
i__48371 = G__48376;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48372),euler$problems$problem_7_$_iter__48369.call(null,cljs.core.chunk_rest.call(null,s__48370__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48372),null);
}
} else {
var x = cljs.core.first.call(null,s__48370__$2);
if(cljs.core.truth_(isPrime_QMARK_.call(null,x))){
return cljs.core.cons.call(null,x,euler$problems$problem_7_$_iter__48369.call(null,cljs.core.rest.call(null,s__48370__$2)));
} else {
var G__48377 = cljs.core.rest.call(null,s__48370__$2);
s__48370__$1 = G__48377;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null));
})()));
});
goog.exportSymbol('euler.problems.problem_7', euler.problems.problem_7);
/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 Ã— 9 Ã— 8 Ã— 9 = 5832.
 *   73167176531330624919225119674426574742355349194934
 *   96983520312774506326239578318016984801869478851843
 *   85861560789112949495459501737958331952853208805511
 *   12540698747158523863050715693290963295227443043557
 *   66896648950445244523161731856403098711121722383113
 *   62229893423380308135336276614282806444486645238749
 *   30358907296290491560440772390713810515859307960866
 *   70172427121883998797908792274921901699720888093776
 *   65727333001053367881220235421809751254540594752243
 *   52584907711670556013604839586446706324415722155397
 *   53697817977846174064955149290862569321978468622482
 *   83972241375657056057490261407972968652414535100474
 *   82166370484403199890008895243450658541227588666881
 *   16427171479924442928230863465674813919123162824586
 *   17866458359124566529476545682848912883142607690042
 *   24219022671055626321111109370544217506941658960408
 *   07198403850962455444362981230987879927244284909188
 *   84580156166097919133875499200524063689912560717606
 *   05886116467109405077541002256983155200055935729725
 *   71636269561882670428252483600823257530420752963450
 *   Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
euler.problems.problem_8 = (function euler$problems$problem_8(){
var big_number_string = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
var number_list = (function (){var iter__30978__auto__ = ((function (big_number_string){
return (function euler$problems$problem_8_$_iter__48378(s__48379){
return (new cljs.core.LazySeq(null,((function (big_number_string){
return (function (){
var s__48379__$1 = s__48379;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48379__$1);
if(temp__5457__auto__){
var s__48379__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48379__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48379__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48381 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48380 = (0);
while(true){
if((i__48380 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48380);
var number = (x | (0));
cljs.core.chunk_append.call(null,b__48381,number);

var G__48382 = (i__48380 + (1));
i__48380 = G__48382;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48381),euler$problems$problem_8_$_iter__48378.call(null,cljs.core.chunk_rest.call(null,s__48379__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48381),null);
}
} else {
var x = cljs.core.first.call(null,s__48379__$2);
var number = (x | (0));
return cljs.core.cons.call(null,number,euler$problems$problem_8_$_iter__48378.call(null,cljs.core.rest.call(null,s__48379__$2)));
}
} else {
return null;
}
break;
}
});})(big_number_string))
,null,null));
});})(big_number_string))
;
return iter__30978__auto__.call(null,cljs.core.seq.call(null,big_number_string));
})();
return cljs.core.apply.call(null,cljs.core.max,cljs.core.map.call(null,((function (big_number_string,number_list){
return (function (list){
return cljs.core.reduce.call(null,cljs.core._STAR_,list);
});})(big_number_string,number_list))
,cljs.core.partition_all.call(null,(13),(1),number_list)));
});
goog.exportSymbol('euler.problems.problem_8', euler.problems.problem_8);
/**
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 *   a2 + b2 = c2
 *   For example, 32 + 42 = 9 + 16 = 25 = 52.
 *   There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 *   Find the product abc.
 */
euler.problems.problem_9 = (function euler$problems$problem_9(){
var triplets = (function (){var iter__30978__auto__ = (function euler$problems$problem_9_$_iter__48383(s__48384){
return (new cljs.core.LazySeq(null,(function (){
var s__48384__$1 = s__48384;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48384__$1);
if(temp__5457__auto__){
var xs__6012__auto__ = temp__5457__auto__;
var a = cljs.core.first.call(null,xs__6012__auto__);
var iterys__30974__auto__ = ((function (s__48384__$1,a,xs__6012__auto__,temp__5457__auto__){
return (function euler$problems$problem_9_$_iter__48383_$_iter__48385(s__48386){
return (new cljs.core.LazySeq(null,((function (s__48384__$1,a,xs__6012__auto__,temp__5457__auto__){
return (function (){
var s__48386__$1 = s__48386;
while(true){
var temp__5457__auto____$1 = cljs.core.seq.call(null,s__48386__$1);
if(temp__5457__auto____$1){
var s__48386__$2 = temp__5457__auto____$1;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48386__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48386__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48388 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48387 = (0);
while(true){
if((i__48387 < size__30977__auto__)){
var b = cljs.core._nth.call(null,c__30976__auto__,i__48387);
var c_squared = (Math.pow(b,(2)) + Math.pow(a,(2)));
var c = Math.sqrt(c_squared);
var triplet = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null));
var a_squared = Math.pow(a,(2));
var b_squared = Math.pow(b,(2));
if((((c > b)) && ((b > a))) && (cljs.core._EQ_.call(null,(a_squared + b_squared),c_squared))){
cljs.core.chunk_append.call(null,b__48388,(function (){
cljs.core.println.call(null,triplet);

return triplet;
})()
);

var G__48389 = (i__48387 + (1));
i__48387 = G__48389;
continue;
} else {
var G__48390 = (i__48387 + (1));
i__48387 = G__48390;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48388),euler$problems$problem_9_$_iter__48383_$_iter__48385.call(null,cljs.core.chunk_rest.call(null,s__48386__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48388),null);
}
} else {
var b = cljs.core.first.call(null,s__48386__$2);
var c_squared = (Math.pow(b,(2)) + Math.pow(a,(2)));
var c = Math.sqrt(c_squared);
var triplet = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null));
var a_squared = Math.pow(a,(2));
var b_squared = Math.pow(b,(2));
if((((c > b)) && ((b > a))) && (cljs.core._EQ_.call(null,(a_squared + b_squared),c_squared))){
return cljs.core.cons.call(null,(function (){
cljs.core.println.call(null,triplet);

return triplet;
})()
,euler$problems$problem_9_$_iter__48383_$_iter__48385.call(null,cljs.core.rest.call(null,s__48386__$2)));
} else {
var G__48391 = cljs.core.rest.call(null,s__48386__$2);
s__48386__$1 = G__48391;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__48384__$1,a,xs__6012__auto__,temp__5457__auto__))
,null,null));
});})(s__48384__$1,a,xs__6012__auto__,temp__5457__auto__))
;
var fs__30975__auto__ = cljs.core.seq.call(null,iterys__30974__auto__.call(null,cljs.core.range.call(null,(a + (1)),(1000))));
if(fs__30975__auto__){
return cljs.core.concat.call(null,fs__30975__auto__,euler$problems$problem_9_$_iter__48383.call(null,cljs.core.rest.call(null,s__48384__$1)));
} else {
var G__48392 = cljs.core.rest.call(null,s__48384__$1);
s__48384__$1 = G__48392;
continue;
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null,(1),(1000)));
})();
return cljs.core.reduce.call(null,cljs.core._STAR_,cljs.core.first.call(null,cljs.core.filter.call(null,((function (triplets){
return (function (list){
return cljs.core._EQ_.call(null,(1000),cljs.core.reduce.call(null,cljs.core._PLUS_,list));
});})(triplets))
,triplets)));
});
goog.exportSymbol('euler.problems.problem_9', euler.problems.problem_9);
/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 *   Find the sum of all the primes below two million.
 */
euler.problems.problem_10 = (function euler$problems$problem_10(){
var prime_QMARK_ = (function() {
var euler$problems$problem_10_$_prime_QMARK_ = null;
var euler$problems$problem_10_$_prime_QMARK___1 = (function (n){
return euler$problems$problem_10_$_prime_QMARK_.call(null,n,(2));
});
var euler$problems$problem_10_$_prime_QMARK___2 = (function (n,start){
while(true){
if((start > Math.sqrt(n))){
return (n > (1));
} else {
if((cljs.core.mod.call(null,n,start) < (1))){
return false;
} else {
var G__48397 = n;
var G__48398 = (start + (1));
n = G__48397;
start = G__48398;
continue;

}
}
break;
}
});
euler$problems$problem_10_$_prime_QMARK_ = function(n,start){
switch(arguments.length){
case 1:
return euler$problems$problem_10_$_prime_QMARK___1.call(this,n);
case 2:
return euler$problems$problem_10_$_prime_QMARK___2.call(this,n,start);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_10_$_prime_QMARK___1;
euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_10_$_prime_QMARK___2;
return euler$problems$problem_10_$_prime_QMARK_;
})()
;
return cljs.core.reduce.call(null,cljs.core._PLUS_,(function (){var iter__30978__auto__ = (function euler$problems$problem_10_$_iter__48393(s__48394){
return (new cljs.core.LazySeq(null,(function (){
var s__48394__$1 = s__48394;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48394__$1);
if(temp__5457__auto__){
var s__48394__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48394__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48394__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48396 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48395 = (0);
while(true){
if((i__48395 < size__30977__auto__)){
var n = cljs.core._nth.call(null,c__30976__auto__,i__48395);
if(cljs.core.truth_(prime_QMARK_.call(null,n))){
if((n < (2000000))){
cljs.core.chunk_append.call(null,b__48396,n);

var G__48399 = (i__48395 + (1));
i__48395 = G__48399;
continue;
} else {
return null;
}
} else {
var G__48400 = (i__48395 + (1));
i__48395 = G__48400;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48396),euler$problems$problem_10_$_iter__48393.call(null,cljs.core.chunk_rest.call(null,s__48394__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48396),null);
}
} else {
var n = cljs.core.first.call(null,s__48394__$2);
if(cljs.core.truth_(prime_QMARK_.call(null,n))){
if((n < (2000000))){
return cljs.core.cons.call(null,n,euler$problems$problem_10_$_iter__48393.call(null,cljs.core.rest.call(null,s__48394__$2)));
} else {
return null;
}
} else {
var G__48401 = cljs.core.rest.call(null,s__48394__$2);
s__48394__$1 = G__48401;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null));
})());
});
goog.exportSymbol('euler.problems.problem_10', euler.problems.problem_10);
/**
 * In the 20Ã—20 grid below, four numbers along a diagonal line have been marked in red.
 *   08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 *   49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 *   81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 *   52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 *   22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 *   24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 *   32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 *   67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 *   24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 *   21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 *   78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 *   16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 *   86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 *   19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 *   04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 *   88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 *   04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 *   20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 *   20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 *   01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
 *   The product of these numbers is 26 Ã— 63 Ã— 78 Ã— 14 = 1788696.
 *   What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20Ã—20 grid?
 */
euler.problems.problem_11 = (function euler$problems$problem_11(){
var matrix_string = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
var number_list = cljs.core.flatten.call(null,cljs.core.map.call(null,((function (matrix_string){
return (function (row){
return cljs.core.filter.call(null,cljs.core.number_QMARK_,cljs.core.map.call(null,((function (matrix_string){
return (function (string){
return (string | (0));
});})(matrix_string))
,clojure.string.split.call(null,row,/ /)));
});})(matrix_string))
,cljs.core.map.call(null,((function (matrix_string){
return (function (row){
return clojure.string.trim.call(null,row);
});})(matrix_string))
,clojure.string.split_lines.call(null,matrix_string))));
var number_matrix = cljs.core.partition.call(null,(20),number_list);
var rows = (function (){var iter__30978__auto__ = ((function (matrix_string,number_list,number_matrix){
return (function euler$problems$problem_11_$_iter__48402(s__48403){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix){
return (function (){
var s__48403__$1 = s__48403;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48403__$1);
if(temp__5457__auto__){
var s__48403__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48403__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48403__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48405 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48404 = (0);
while(true){
if((i__48404 < size__30977__auto__)){
var y = cljs.core._nth.call(null,c__30976__auto__,i__48404);
var row = cljs.core.nth.call(null,number_matrix,y);
cljs.core.chunk_append.call(null,b__48405,row);

var G__48426 = (i__48404 + (1));
i__48404 = G__48426;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48405),euler$problems$problem_11_$_iter__48402.call(null,cljs.core.chunk_rest.call(null,s__48403__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48405),null);
}
} else {
var y = cljs.core.first.call(null,s__48403__$2);
var row = cljs.core.nth.call(null,number_matrix,y);
return cljs.core.cons.call(null,row,euler$problems$problem_11_$_iter__48402.call(null,cljs.core.rest.call(null,s__48403__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix))
,null,null));
});})(matrix_string,number_list,number_matrix))
;
return iter__30978__auto__.call(null,cljs.core.range.call(null,(0),(20)));
})();
var columns = (function (){var iter__30978__auto__ = ((function (matrix_string,number_list,number_matrix,rows){
return (function euler$problems$problem_11_$_iter__48406(s__48407){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows){
return (function (){
var s__48407__$1 = s__48407;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48407__$1);
if(temp__5457__auto__){
var s__48407__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48407__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48407__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48409 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48408 = (0);
while(true){
if((i__48408 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48408);
var column = cljs.core.take_nth.call(null,(20),cljs.core.drop.call(null,x,number_list));
cljs.core.chunk_append.call(null,b__48409,column);

var G__48427 = (i__48408 + (1));
i__48408 = G__48427;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48409),euler$problems$problem_11_$_iter__48406.call(null,cljs.core.chunk_rest.call(null,s__48407__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48409),null);
}
} else {
var x = cljs.core.first.call(null,s__48407__$2);
var column = cljs.core.take_nth.call(null,(20),cljs.core.drop.call(null,x,number_list));
return cljs.core.cons.call(null,column,euler$problems$problem_11_$_iter__48406.call(null,cljs.core.rest.call(null,s__48407__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows))
,null,null));
});})(matrix_string,number_list,number_matrix,rows))
;
return iter__30978__auto__.call(null,cljs.core.range.call(null,(0),(20)));
})();
var diagonal_lr_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__30978__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns){
return (function euler$problems$problem_11_$_iter__48410(s__48411){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns){
return (function (){
var s__48411__$1 = s__48411;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48411__$1);
if(temp__5457__auto__){
var s__48411__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48411__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48411__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48413 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48412 = (0);
while(true){
if((i__48412 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48412);
var diagonal = cljs.core.take_nth.call(null,(21),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) <= (16))){
cljs.core.chunk_append.call(null,b__48413,cljs.core.partition.call(null,(4),(1),diagonal));

var G__48428 = (i__48412 + (1));
i__48412 = G__48428;
continue;
} else {
var G__48429 = (i__48412 + (1));
i__48412 = G__48429;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48413),euler$problems$problem_11_$_iter__48410.call(null,cljs.core.chunk_rest.call(null,s__48411__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48413),null);
}
} else {
var x = cljs.core.first.call(null,s__48411__$2);
var diagonal = cljs.core.take_nth.call(null,(21),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) <= (16))){
return cljs.core.cons.call(null,cljs.core.partition.call(null,(4),(1),diagonal),euler$problems$problem_11_$_iter__48410.call(null,cljs.core.rest.call(null,s__48411__$2)));
} else {
var G__48430 = cljs.core.rest.call(null,s__48411__$2);
s__48411__$1 = G__48430;
continue;
}
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns))
;
return iter__30978__auto__.call(null,cljs.core.range.call(null,(0),cljs.core.reduce.call(null,cljs.core.inc,number_list)));
})());
var diagonal_rl_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__30978__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s){
return (function euler$problems$problem_11_$_iter__48414(s__48415){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s){
return (function (){
var s__48415__$1 = s__48415;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48415__$1);
if(temp__5457__auto__){
var s__48415__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48415__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48415__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48417 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48416 = (0);
while(true){
if((i__48416 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48416);
var diagonal = cljs.core.take_nth.call(null,(19),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) >= (3))){
cljs.core.chunk_append.call(null,b__48417,cljs.core.partition.call(null,(4),(1),diagonal));

var G__48431 = (i__48416 + (1));
i__48416 = G__48431;
continue;
} else {
var G__48432 = (i__48416 + (1));
i__48416 = G__48432;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48417),euler$problems$problem_11_$_iter__48414.call(null,cljs.core.chunk_rest.call(null,s__48415__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48417),null);
}
} else {
var x = cljs.core.first.call(null,s__48415__$2);
var diagonal = cljs.core.take_nth.call(null,(19),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) >= (3))){
return cljs.core.cons.call(null,cljs.core.partition.call(null,(4),(1),diagonal),euler$problems$problem_11_$_iter__48414.call(null,cljs.core.rest.call(null,s__48415__$2)));
} else {
var G__48433 = cljs.core.rest.call(null,s__48415__$2);
s__48415__$1 = G__48433;
continue;
}
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s))
;
return iter__30978__auto__.call(null,cljs.core.range.call(null,(0),cljs.core.reduce.call(null,cljs.core.inc,number_list)));
})());
var horizontal_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__30978__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s){
return (function euler$problems$problem_11_$_iter__48418(s__48419){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s){
return (function (){
var s__48419__$1 = s__48419;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48419__$1);
if(temp__5457__auto__){
var s__48419__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48419__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48419__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48421 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48420 = (0);
while(true){
if((i__48420 < size__30977__auto__)){
var row = cljs.core._nth.call(null,c__30976__auto__,i__48420);
var fours = cljs.core.partition.call(null,(4),(1),row);
cljs.core.chunk_append.call(null,b__48421,fours);

var G__48434 = (i__48420 + (1));
i__48420 = G__48434;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48421),euler$problems$problem_11_$_iter__48418.call(null,cljs.core.chunk_rest.call(null,s__48419__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48421),null);
}
} else {
var row = cljs.core.first.call(null,s__48419__$2);
var fours = cljs.core.partition.call(null,(4),(1),row);
return cljs.core.cons.call(null,fours,euler$problems$problem_11_$_iter__48418.call(null,cljs.core.rest.call(null,s__48419__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s))
;
return iter__30978__auto__.call(null,rows);
})());
var vertical_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__30978__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s){
return (function euler$problems$problem_11_$_iter__48422(s__48423){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s){
return (function (){
var s__48423__$1 = s__48423;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48423__$1);
if(temp__5457__auto__){
var s__48423__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48423__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48423__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48425 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48424 = (0);
while(true){
if((i__48424 < size__30977__auto__)){
var column = cljs.core._nth.call(null,c__30976__auto__,i__48424);
var fours = cljs.core.partition.call(null,(4),(1),column);
cljs.core.chunk_append.call(null,b__48425,fours);

var G__48435 = (i__48424 + (1));
i__48424 = G__48435;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48425),euler$problems$problem_11_$_iter__48422.call(null,cljs.core.chunk_rest.call(null,s__48423__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48425),null);
}
} else {
var column = cljs.core.first.call(null,s__48423__$2);
var fours = cljs.core.partition.call(null,(4),(1),column);
return cljs.core.cons.call(null,fours,euler$problems$problem_11_$_iter__48422.call(null,cljs.core.rest.call(null,s__48423__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s))
;
return iter__30978__auto__.call(null,columns);
})());
var all_4s = cljs.core.concat.call(null,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s);
var products = cljs.core.map.call(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s,all_4s){
return (function (four){
return cljs.core.reduce.call(null,cljs.core._STAR_,four);
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s,all_4s))
,all_4s);
return cljs.core.apply.call(null,cljs.core.max,products);
});
goog.exportSymbol('euler.problems.problem_11', euler.problems.problem_11);
/**
 * the sequence of triangle numbers is generated by adding the natural numbers. so the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. the first ten terms would be:
 *   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *   let us list the factors of the first seven triangle numbers:
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 *   we can see that 28 is the first triangle number to have over five divisors.
 *   what is the value of the first triangle number to have over five hundred divisors?
 */
euler.problems.problem_12 = (function euler$problems$problem_12(){
var triangle_numbers = (function (){var iter__30978__auto__ = (function euler$problems$problem_12_$_iter__48436(s__48437){
return (new cljs.core.LazySeq(null,(function (){
var s__48437__$1 = s__48437;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48437__$1);
if(temp__5457__auto__){
var s__48437__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48437__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48437__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48439 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48438 = (0);
while(true){
if((i__48438 < size__30977__auto__)){
var n = cljs.core._nth.call(null,c__30976__auto__,i__48438);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.range.call(null,(0),n));
if((sum > (0))){
cljs.core.chunk_append.call(null,b__48439,sum);

var G__48444 = (i__48438 + (1));
i__48438 = G__48444;
continue;
} else {
var G__48445 = (i__48438 + (1));
i__48438 = G__48445;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48439),euler$problems$problem_12_$_iter__48436.call(null,cljs.core.chunk_rest.call(null,s__48437__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48439),null);
}
} else {
var n = cljs.core.first.call(null,s__48437__$2);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.range.call(null,(0),n));
if((sum > (0))){
return cljs.core.cons.call(null,sum,euler$problems$problem_12_$_iter__48436.call(null,cljs.core.rest.call(null,s__48437__$2)));
} else {
var G__48446 = cljs.core.rest.call(null,s__48437__$2);
s__48437__$1 = G__48446;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__30978__auto__.call(null,cljs.core.range.call(null));
})();
var factors = ((function (triangle_numbers){
return (function (n){
return cljs.core.into.call(null,cljs.core.sorted_set.call(null),cljs.core.reduce.call(null,cljs.core.concat,(function (){var iter__30978__auto__ = ((function (triangle_numbers){
return (function euler$problems$problem_12_$_iter__48440(s__48441){
return (new cljs.core.LazySeq(null,((function (triangle_numbers){
return (function (){
var s__48441__$1 = s__48441;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48441__$1);
if(temp__5457__auto__){
var s__48441__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48441__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48441__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48443 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48442 = (0);
while(true){
if((i__48442 < size__30977__auto__)){
var x = cljs.core._nth.call(null,c__30976__auto__,i__48442);
if((cljs.core.rem.call(null,n,x) === (0))){
cljs.core.chunk_append.call(null,b__48443,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null));

var G__48447 = (i__48442 + (1));
i__48442 = G__48447;
continue;
} else {
var G__48448 = (i__48442 + (1));
i__48442 = G__48448;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48443),euler$problems$problem_12_$_iter__48440.call(null,cljs.core.chunk_rest.call(null,s__48441__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48443),null);
}
} else {
var x = cljs.core.first.call(null,s__48441__$2);
if((cljs.core.rem.call(null,n,x) === (0))){
return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null),euler$problems$problem_12_$_iter__48440.call(null,cljs.core.rest.call(null,s__48441__$2)));
} else {
var G__48449 = cljs.core.rest.call(null,s__48441__$2);
s__48441__$1 = G__48449;
continue;
}
}
} else {
return null;
}
break;
}
});})(triangle_numbers))
,null,null));
});})(triangle_numbers))
;
return iter__30978__auto__.call(null,cljs.core.range.call(null,(1),(Math.sqrt(n) + (1))));
})()));
});})(triangle_numbers))
;
return cljs.core.first.call(null,cljs.core.filter.call(null,((function (triangle_numbers,factors){
return (function (triangle_number){
var factor_list = factors.call(null,triangle_number);
var list_length = cljs.core.reduce.call(null,((function (factor_list,triangle_numbers,factors){
return (function (count,n){
return (count + (1));
});})(factor_list,triangle_numbers,factors))
,(0),factor_list);
cljs.core.println.call(null,triangle_number,":",list_length);

return ((500) < list_length);
});})(triangle_numbers,factors))
,triangle_numbers));
});
goog.exportSymbol('euler.problems.problem_12', euler.problems.problem_12);
euler.problems.problem_13 = (function euler$problems$problem_13(){
var number_string = "37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690";
var numbers = cljs.core.map.call(null,clojure.string.trim,clojure.string.split_lines.call(null,number_string));
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,numbers);
var add_list_columns = ((function (number_string,numbers,sum){
return (function() {
var euler$problems$problem_13_$_add_list_columns = null;
var euler$problems$problem_13_$_add_list_columns__2 = (function (x,y){
return euler$problems$problem_13_$_add_list_columns.call(null,x,y,(0),cljs.core.List.EMPTY);
});
var euler$problems$problem_13_$_add_list_columns__4 = (function (x,y,carry,sum__$1){
while(true){
if(((cljs.core.first.call(null,x) == null)) && ((cljs.core.first.call(null,y) == null))){
return cljs.core.reverse.call(null,(((carry === (0)))?sum__$1:cljs.core.conj.call(null,sum__$1,carry)));
} else {
var x_curr = ((((0) < cljs.core.count.call(null,x)))?cljs.core.first.call(null,x):(0));
var y_curr = ((((0) < cljs.core.count.call(null,y)))?cljs.core.first.call(null,y):(0));
var x_rest = cljs.core.rest.call(null,x);
var y_rest = cljs.core.rest.call(null,y);
var curr_sum = cljs.core.mod.call(null,((x_curr + y_curr) + carry),(10));
var curr_carry = cljs.core.quot.call(null,((x_curr + y_curr) + carry),(10));
var G__48454 = x_rest;
var G__48455 = y_rest;
var G__48456 = curr_carry;
var G__48457 = cljs.core.conj.call(null,sum__$1,curr_sum);
x = G__48454;
y = G__48455;
carry = G__48456;
sum__$1 = G__48457;
continue;

}
break;
}
});
euler$problems$problem_13_$_add_list_columns = function(x,y,carry,sum__$1){
switch(arguments.length){
case 2:
return euler$problems$problem_13_$_add_list_columns__2.call(this,x,y);
case 4:
return euler$problems$problem_13_$_add_list_columns__4.call(this,x,y,carry,sum__$1);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_13_$_add_list_columns.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_13_$_add_list_columns__2;
euler$problems$problem_13_$_add_list_columns.cljs$core$IFn$_invoke$arity$4 = euler$problems$problem_13_$_add_list_columns__4;
return euler$problems$problem_13_$_add_list_columns;
})()
;})(number_string,numbers,sum))
;
return cljs.core.take.call(null,(10),cljs.core.reverse.call(null,cljs.core.reduce.call(null,add_list_columns,cljs.core.map.call(null,cljs.core.reverse,(function (){var iter__30978__auto__ = ((function (number_string,numbers,sum){
return (function euler$problems$problem_13_$_iter__48450(s__48451){
return (new cljs.core.LazySeq(null,((function (number_string,numbers,sum){
return (function (){
var s__48451__$1 = s__48451;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__48451__$1);
if(temp__5457__auto__){
var s__48451__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__48451__$2)){
var c__30976__auto__ = cljs.core.chunk_first.call(null,s__48451__$2);
var size__30977__auto__ = cljs.core.count.call(null,c__30976__auto__);
var b__48453 = cljs.core.chunk_buffer.call(null,size__30977__auto__);
if((function (){var i__48452 = (0);
while(true){
if((i__48452 < size__30977__auto__)){
var number = cljs.core._nth.call(null,c__30976__auto__,i__48452);
var number_list = cljs.core.map.call(null,cljs.core.int$,clojure.string.split.call(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(number)].join(''),""));
var reversed_number_list = cljs.core.reverse.call(null,number_list);
cljs.core.chunk_append.call(null,b__48453,number_list);

var G__48458 = (i__48452 + (1));
i__48452 = G__48458;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48453),euler$problems$problem_13_$_iter__48450.call(null,cljs.core.chunk_rest.call(null,s__48451__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__48453),null);
}
} else {
var number = cljs.core.first.call(null,s__48451__$2);
var number_list = cljs.core.map.call(null,cljs.core.int$,clojure.string.split.call(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(number)].join(''),""));
var reversed_number_list = cljs.core.reverse.call(null,number_list);
return cljs.core.cons.call(null,number_list,euler$problems$problem_13_$_iter__48450.call(null,cljs.core.rest.call(null,s__48451__$2)));
}
} else {
return null;
}
break;
}
});})(number_string,numbers,sum))
,null,null));
});})(number_string,numbers,sum))
;
return iter__30978__auto__.call(null,numbers);
})()))));
});
goog.exportSymbol('euler.problems.problem_13', euler.problems.problem_13);

//# sourceMappingURL=problems.js.map?rel=1512628807577
