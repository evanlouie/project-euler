// Compiled by ClojureScript 1.9.946 {}
goog.provide('euler.problems');
goog.require('cljs.core');
goog.require('clojure.string');
/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 *   Find the sum of all the multiples of 3 or 5 below 1000.
 */
euler.problems.problem_1 = (function euler$problems$problem_1(){
return cljs.core.reduce.call(null,cljs.core._PLUS_,(function (){var iter__31671__auto__ = (function euler$problems$problem_1_$_iter__37483(s__37484){
return (new cljs.core.LazySeq(null,(function (){
var s__37484__$1 = s__37484;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37484__$1);
if(temp__5457__auto__){
var s__37484__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37484__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37484__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37486 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37485 = (0);
while(true){
if((i__37485 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37485);
if(((cljs.core.mod.call(null,x,(3)) === (0))) || ((cljs.core.mod.call(null,x,(5)) === (0)))){
cljs.core.chunk_append.call(null,b__37486,x);

var G__37487 = (i__37485 + (1));
i__37485 = G__37487;
continue;
} else {
var G__37488 = (i__37485 + (1));
i__37485 = G__37488;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37486),euler$problems$problem_1_$_iter__37483.call(null,cljs.core.chunk_rest.call(null,s__37484__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37486),null);
}
} else {
var x = cljs.core.first.call(null,s__37484__$2);
if(((cljs.core.mod.call(null,x,(3)) === (0))) || ((cljs.core.mod.call(null,x,(5)) === (0)))){
return cljs.core.cons.call(null,x,euler$problems$problem_1_$_iter__37483.call(null,cljs.core.rest.call(null,s__37484__$2)));
} else {
var G__37489 = cljs.core.rest.call(null,s__37484__$2);
s__37484__$1 = G__37489;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null,(1000)));
})());
});
/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *   By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
euler.problems.problem_2 = (function euler$problems$problem_2(){
var fib = (function() {
var euler$problems$problem_2_$_fib = null;
var euler$problems$problem_2_$_fib__1 = (function (n){
return euler$problems$problem_2_$_fib.call(null,n,(0),(1));
});
var euler$problems$problem_2_$_fib__3 = (function (n,x,y){
while(true){
var pred__37493 = cljs.core._EQ_;
var expr__37494 = n;
if(cljs.core.truth_(pred__37493.call(null,(0),expr__37494))){
return x;
} else {
if(cljs.core.truth_(pred__37493.call(null,(1),expr__37494))){
return y;
} else {
var G__37500 = (n - (1));
var G__37501 = y;
var G__37502 = (x + y);
n = G__37500;
x = G__37501;
y = G__37502;
continue;
}
}
break;
}
});
euler$problems$problem_2_$_fib = function(n,x,y){
switch(arguments.length){
case 1:
return euler$problems$problem_2_$_fib__1.call(this,n);
case 3:
return euler$problems$problem_2_$_fib__3.call(this,n,x,y);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_2_$_fib.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_2_$_fib__1;
euler$problems$problem_2_$_fib.cljs$core$IFn$_invoke$arity$3 = euler$problems$problem_2_$_fib__3;
return euler$problems$problem_2_$_fib;
})()
;
return cljs.core.reduce.call(null,cljs.core._PLUS_,(function (){var iter__31671__auto__ = (function euler$problems$problem_2_$_iter__37496(s__37497){
return (new cljs.core.LazySeq(null,(function (){
var s__37497__$1 = s__37497;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37497__$1);
if(temp__5457__auto__){
var s__37497__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37497__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37497__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37499 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37498 = (0);
while(true){
if((i__37498 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37498);
var fibn = fib.call(null,x);
if(cljs.core.even_QMARK_.call(null,fibn)){
if((fibn < (4000000))){
cljs.core.chunk_append.call(null,b__37499,fibn);

var G__37503 = (i__37498 + (1));
i__37498 = G__37503;
continue;
} else {
return null;
}
} else {
var G__37504 = (i__37498 + (1));
i__37498 = G__37504;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37499),euler$problems$problem_2_$_iter__37496.call(null,cljs.core.chunk_rest.call(null,s__37497__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37499),null);
}
} else {
var x = cljs.core.first.call(null,s__37497__$2);
var fibn = fib.call(null,x);
if(cljs.core.even_QMARK_.call(null,fibn)){
if((fibn < (4000000))){
return cljs.core.cons.call(null,fibn,euler$problems$problem_2_$_iter__37496.call(null,cljs.core.rest.call(null,s__37497__$2)));
} else {
return null;
}
} else {
var G__37505 = cljs.core.rest.call(null,s__37497__$2);
s__37497__$1 = G__37505;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null));
})());
});
/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 *   What is the largest prime factor of the number 600851475143 ?
 */
euler.problems.problem_3 = (function euler$problems$problem_3(){
var multiple_QMARK_ = (function euler$problems$problem_3_$_multiple_QMARK_(n,div){
return (cljs.core.mod.call(null,n,div) === (0));
});
var prime_factors = (function() {
var euler$problems$problem_3_$_prime_factors = null;
var euler$problems$problem_3_$_prime_factors__1 = (function (n){
return euler$problems$problem_3_$_prime_factors.call(null,n,(2),cljs.core.List.EMPTY);
});
var euler$problems$problem_3_$_prime_factors__3 = (function (n,candidate,acc){
while(true){
if((n <= (1))){
return cljs.core.reverse.call(null,acc);
} else {
if(cljs.core.truth_(multiple_QMARK_.call(null,n,candidate))){
var G__37506 = (n / candidate);
var G__37507 = candidate;
var G__37508 = cljs.core.cons.call(null,candidate,acc);
n = G__37506;
candidate = G__37507;
acc = G__37508;
continue;
} else {
var G__37509 = n;
var G__37510 = (candidate + (1));
var G__37511 = acc;
n = G__37509;
candidate = G__37510;
acc = G__37511;
continue;

}
}
break;
}
});
euler$problems$problem_3_$_prime_factors = function(n,candidate,acc){
switch(arguments.length){
case 1:
return euler$problems$problem_3_$_prime_factors__1.call(this,n);
case 3:
return euler$problems$problem_3_$_prime_factors__3.call(this,n,candidate,acc);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_3_$_prime_factors__1;
euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$3 = euler$problems$problem_3_$_prime_factors__3;
return euler$problems$problem_3_$_prime_factors;
})()
;
return cljs.core.apply.call(null,cljs.core.max,prime_factors.call(null,(600851475143)));
});
/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
 *   Find the largest palindrome made from the product of two 3-digit numbers.
 */
euler.problems.problem_4 = (function euler$problems$problem_4(){
var palindrome_QMARK_ = (function euler$problems$problem_4_$_palindrome_QMARK_(num){
return cljs.core._EQ_.call(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(num)].join(''),cljs.core.apply.call(null,cljs.core.str,cljs.core.reverse.call(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(num)].join(''))));
});
return cljs.core.apply.call(null,cljs.core.max,(function (){var iter__31671__auto__ = (function euler$problems$problem_4_$_iter__37512(s__37513){
return (new cljs.core.LazySeq(null,(function (){
var s__37513__$1 = s__37513;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37513__$1);
if(temp__5457__auto__){
var xs__6012__auto__ = temp__5457__auto__;
var x = cljs.core.first.call(null,xs__6012__auto__);
var iterys__31667__auto__ = ((function (s__37513__$1,x,xs__6012__auto__,temp__5457__auto__){
return (function euler$problems$problem_4_$_iter__37512_$_iter__37514(s__37515){
return (new cljs.core.LazySeq(null,((function (s__37513__$1,x,xs__6012__auto__,temp__5457__auto__){
return (function (){
var s__37515__$1 = s__37515;
while(true){
var temp__5457__auto____$1 = cljs.core.seq.call(null,s__37515__$1);
if(temp__5457__auto____$1){
var s__37515__$2 = temp__5457__auto____$1;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37515__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37515__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37517 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37516 = (0);
while(true){
if((i__37516 < size__31670__auto__)){
var y = cljs.core._nth.call(null,c__31669__auto__,i__37516);
var product = (x * y);
if(cljs.core.truth_(palindrome_QMARK_.call(null,product))){
cljs.core.chunk_append.call(null,b__37517,product);

var G__37518 = (i__37516 + (1));
i__37516 = G__37518;
continue;
} else {
var G__37519 = (i__37516 + (1));
i__37516 = G__37519;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37517),euler$problems$problem_4_$_iter__37512_$_iter__37514.call(null,cljs.core.chunk_rest.call(null,s__37515__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37517),null);
}
} else {
var y = cljs.core.first.call(null,s__37515__$2);
var product = (x * y);
if(cljs.core.truth_(palindrome_QMARK_.call(null,product))){
return cljs.core.cons.call(null,product,euler$problems$problem_4_$_iter__37512_$_iter__37514.call(null,cljs.core.rest.call(null,s__37515__$2)));
} else {
var G__37520 = cljs.core.rest.call(null,s__37515__$2);
s__37515__$1 = G__37520;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__37513__$1,x,xs__6012__auto__,temp__5457__auto__))
,null,null));
});})(s__37513__$1,x,xs__6012__auto__,temp__5457__auto__))
;
var fs__31668__auto__ = cljs.core.seq.call(null,iterys__31667__auto__.call(null,cljs.core.range.call(null,(1000))));
if(fs__31668__auto__){
return cljs.core.concat.call(null,fs__31668__auto__,euler$problems$problem_4_$_iter__37512.call(null,cljs.core.rest.call(null,s__37513__$1)));
} else {
var G__37521 = cljs.core.rest.call(null,s__37513__$1);
s__37513__$1 = G__37521;
continue;
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null,(1000)));
})());
});
/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 *   What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
euler.problems.problem_5 = (function euler$problems$problem_5(){
var factors = (function (n){
return cljs.core.into.call(null,cljs.core.sorted_set.call(null),cljs.core.reduce.call(null,cljs.core.concat,(function (){var iter__31671__auto__ = (function euler$problems$problem_5_$_iter__37522(s__37523){
return (new cljs.core.LazySeq(null,(function (){
var s__37523__$1 = s__37523;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37523__$1);
if(temp__5457__auto__){
var s__37523__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37523__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37523__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37525 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37524 = (0);
while(true){
if((i__37524 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37524);
if((cljs.core.rem.call(null,n,x) === (0))){
cljs.core.chunk_append.call(null,b__37525,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null));

var G__37530 = (i__37524 + (1));
i__37524 = G__37530;
continue;
} else {
var G__37531 = (i__37524 + (1));
i__37524 = G__37531;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37525),euler$problems$problem_5_$_iter__37522.call(null,cljs.core.chunk_rest.call(null,s__37523__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37525),null);
}
} else {
var x = cljs.core.first.call(null,s__37523__$2);
if((cljs.core.rem.call(null,n,x) === (0))){
return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null),euler$problems$problem_5_$_iter__37522.call(null,cljs.core.rest.call(null,s__37523__$2)));
} else {
var G__37532 = cljs.core.rest.call(null,s__37523__$2);
s__37523__$1 = G__37532;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null,(1),(Math.sqrt(n) + (1))));
})()));
});
var prime_QMARK_ = cljs.core.memoize.call(null,((function (factors){
return (function (n){
return (cljs.core.count.call(null,factors.call(null,n)) === (0));
});})(factors))
);
var primes = (function (){var iter__31671__auto__ = ((function (factors,prime_QMARK_){
return (function euler$problems$problem_5_$_iter__37526(s__37527){
return (new cljs.core.LazySeq(null,((function (factors,prime_QMARK_){
return (function (){
var s__37527__$1 = s__37527;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37527__$1);
if(temp__5457__auto__){
var s__37527__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37527__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37527__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37529 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37528 = (0);
while(true){
if((i__37528 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37528);
if(cljs.core.truth_(prime_QMARK_.call(null))){
cljs.core.chunk_append.call(null,b__37529,x);

var G__37533 = (i__37528 + (1));
i__37528 = G__37533;
continue;
} else {
var G__37534 = (i__37528 + (1));
i__37528 = G__37534;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37529),euler$problems$problem_5_$_iter__37526.call(null,cljs.core.chunk_rest.call(null,s__37527__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37529),null);
}
} else {
var x = cljs.core.first.call(null,s__37527__$2);
if(cljs.core.truth_(prime_QMARK_.call(null))){
return cljs.core.cons.call(null,x,euler$problems$problem_5_$_iter__37526.call(null,cljs.core.rest.call(null,s__37527__$2)));
} else {
var G__37535 = cljs.core.rest.call(null,s__37527__$2);
s__37527__$1 = G__37535;
continue;
}
}
} else {
return null;
}
break;
}
});})(factors,prime_QMARK_))
,null,null));
});})(factors,prime_QMARK_))
;
return iter__31671__auto__.call(null,cljs.core.range.call(null));
})();
var set_upto = cljs.core.memoize.call(null,((function (factors,prime_QMARK_,primes){
return (function (n){
return cljs.core.into.call(null,cljs.core.sorted_set.call(null),cljs.core.range.call(null,(1),(n + (1))));
});})(factors,prime_QMARK_,primes))
);
var divisible_upto_QMARK_ = ((function (factors,prime_QMARK_,primes,set_upto){
return (function (divisor,n){
return cljs.core.every_QMARK_.call(null,cljs.core.partial.call(null,cljs.core.contains_QMARK_,factors.call(null,n)),set_upto.call(null,divisor));
});})(factors,prime_QMARK_,primes,set_upto))
;
return cljs.core.first.call(null,cljs.core.filter.call(null,cljs.core.partial.call(null,divisible_upto_QMARK_,(20)),cljs.core.map.call(null,((function (factors,prime_QMARK_,primes,set_upto,divisible_upto_QMARK_){
return (function (n){
cljs.core.println.call(null,n);

return n;
});})(factors,prime_QMARK_,primes,set_upto,divisible_upto_QMARK_))
,cljs.core.iterate.call(null,cljs.core.partial.call(null,cljs.core._PLUS_,(20)),(20)))));
});
/**
 * The sum of the squares of the first ten natural numbers is,
 *   12 + 22 + ... + 102 = 385
 *   The square of the sum of the first ten natural numbers is,
 *   (1 + 2 + ... + 10)2 = 552 = 3025
 *   Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.
 *   Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
euler.problems.problem_6 = (function euler$problems$problem_6(){
var sum_of_squares = (function euler$problems$problem_6_$_sum_of_squares(up_to){
return cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.map.call(null,(function (n){
return (n * n);
}),cljs.core.range.call(null,(1),(up_to + (1)))));
});
var square_of_sum = (function euler$problems$problem_6_$_square_of_sum(up_to){
return Math.pow(cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.range.call(null,(1),(up_to + (1)))),(2));
});
return (square_of_sum.call(null,(100)) - sum_of_squares.call(null,(100)));
});
/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 *   What is the 10 001st prime number?
 */
euler.problems.problem_7 = (function euler$problems$problem_7(){
var isPrime_QMARK_ = (function() {
var euler$problems$problem_7_$_isPrime_QMARK_ = null;
var euler$problems$problem_7_$_isPrime_QMARK___1 = (function (n){
return euler$problems$problem_7_$_isPrime_QMARK_.call(null,n,(2));
});
var euler$problems$problem_7_$_isPrime_QMARK___2 = (function (n,start){
while(true){
if((start > Math.sqrt(n))){
return (n > (1));
} else {
if((cljs.core.mod.call(null,n,start) < (1))){
return false;
} else {
var G__37540 = n;
var G__37541 = (start + (1));
n = G__37540;
start = G__37541;
continue;

}
}
break;
}
});
euler$problems$problem_7_$_isPrime_QMARK_ = function(n,start){
switch(arguments.length){
case 1:
return euler$problems$problem_7_$_isPrime_QMARK___1.call(this,n);
case 2:
return euler$problems$problem_7_$_isPrime_QMARK___2.call(this,n,start);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_7_$_isPrime_QMARK_.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_7_$_isPrime_QMARK___1;
euler$problems$problem_7_$_isPrime_QMARK_.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_7_$_isPrime_QMARK___2;
return euler$problems$problem_7_$_isPrime_QMARK_;
})()
;
return cljs.core.last.call(null,cljs.core.take.call(null,(10001),(function (){var iter__31671__auto__ = (function euler$problems$problem_7_$_iter__37536(s__37537){
return (new cljs.core.LazySeq(null,(function (){
var s__37537__$1 = s__37537;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37537__$1);
if(temp__5457__auto__){
var s__37537__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37537__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37537__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37539 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37538 = (0);
while(true){
if((i__37538 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37538);
if(cljs.core.truth_(isPrime_QMARK_.call(null,x))){
cljs.core.chunk_append.call(null,b__37539,x);

var G__37542 = (i__37538 + (1));
i__37538 = G__37542;
continue;
} else {
var G__37543 = (i__37538 + (1));
i__37538 = G__37543;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37539),euler$problems$problem_7_$_iter__37536.call(null,cljs.core.chunk_rest.call(null,s__37537__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37539),null);
}
} else {
var x = cljs.core.first.call(null,s__37537__$2);
if(cljs.core.truth_(isPrime_QMARK_.call(null,x))){
return cljs.core.cons.call(null,x,euler$problems$problem_7_$_iter__37536.call(null,cljs.core.rest.call(null,s__37537__$2)));
} else {
var G__37544 = cljs.core.rest.call(null,s__37537__$2);
s__37537__$1 = G__37544;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null));
})()));
});
/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 Ã— 9 Ã— 8 Ã— 9 = 5832.
 *   73167176531330624919225119674426574742355349194934
 *   96983520312774506326239578318016984801869478851843
 *   85861560789112949495459501737958331952853208805511
 *   12540698747158523863050715693290963295227443043557
 *   66896648950445244523161731856403098711121722383113
 *   62229893423380308135336276614282806444486645238749
 *   30358907296290491560440772390713810515859307960866
 *   70172427121883998797908792274921901699720888093776
 *   65727333001053367881220235421809751254540594752243
 *   52584907711670556013604839586446706324415722155397
 *   53697817977846174064955149290862569321978468622482
 *   83972241375657056057490261407972968652414535100474
 *   82166370484403199890008895243450658541227588666881
 *   16427171479924442928230863465674813919123162824586
 *   17866458359124566529476545682848912883142607690042
 *   24219022671055626321111109370544217506941658960408
 *   07198403850962455444362981230987879927244284909188
 *   84580156166097919133875499200524063689912560717606
 *   05886116467109405077541002256983155200055935729725
 *   71636269561882670428252483600823257530420752963450
 *   Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
euler.problems.problem_8 = (function euler$problems$problem_8(){
var big_number_string = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
var number_list = (function (){var iter__31671__auto__ = ((function (big_number_string){
return (function euler$problems$problem_8_$_iter__37545(s__37546){
return (new cljs.core.LazySeq(null,((function (big_number_string){
return (function (){
var s__37546__$1 = s__37546;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37546__$1);
if(temp__5457__auto__){
var s__37546__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37546__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37546__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37548 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37547 = (0);
while(true){
if((i__37547 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37547);
var number = (x | (0));
cljs.core.chunk_append.call(null,b__37548,number);

var G__37549 = (i__37547 + (1));
i__37547 = G__37549;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37548),euler$problems$problem_8_$_iter__37545.call(null,cljs.core.chunk_rest.call(null,s__37546__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37548),null);
}
} else {
var x = cljs.core.first.call(null,s__37546__$2);
var number = (x | (0));
return cljs.core.cons.call(null,number,euler$problems$problem_8_$_iter__37545.call(null,cljs.core.rest.call(null,s__37546__$2)));
}
} else {
return null;
}
break;
}
});})(big_number_string))
,null,null));
});})(big_number_string))
;
return iter__31671__auto__.call(null,cljs.core.seq.call(null,big_number_string));
})();
return cljs.core.apply.call(null,cljs.core.max,cljs.core.map.call(null,((function (big_number_string,number_list){
return (function (list){
return cljs.core.reduce.call(null,cljs.core._STAR_,list);
});})(big_number_string,number_list))
,cljs.core.partition_all.call(null,(13),(1),number_list)));
});
/**
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 *   a2 + b2 = c2
 *   For example, 32 + 42 = 9 + 16 = 25 = 52.
 *   There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 *   Find the product abc.
 */
euler.problems.problem_9 = (function euler$problems$problem_9(){
var triplets = (function (){var iter__31671__auto__ = (function euler$problems$problem_9_$_iter__37550(s__37551){
return (new cljs.core.LazySeq(null,(function (){
var s__37551__$1 = s__37551;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37551__$1);
if(temp__5457__auto__){
var xs__6012__auto__ = temp__5457__auto__;
var a = cljs.core.first.call(null,xs__6012__auto__);
var iterys__31667__auto__ = ((function (s__37551__$1,a,xs__6012__auto__,temp__5457__auto__){
return (function euler$problems$problem_9_$_iter__37550_$_iter__37552(s__37553){
return (new cljs.core.LazySeq(null,((function (s__37551__$1,a,xs__6012__auto__,temp__5457__auto__){
return (function (){
var s__37553__$1 = s__37553;
while(true){
var temp__5457__auto____$1 = cljs.core.seq.call(null,s__37553__$1);
if(temp__5457__auto____$1){
var s__37553__$2 = temp__5457__auto____$1;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37553__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37553__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37555 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37554 = (0);
while(true){
if((i__37554 < size__31670__auto__)){
var b = cljs.core._nth.call(null,c__31669__auto__,i__37554);
var c_squared = (Math.pow(b,(2)) + Math.pow(a,(2)));
var c = Math.sqrt(c_squared);
var triplet = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null));
var a_squared = Math.pow(a,(2));
var b_squared = Math.pow(b,(2));
if((((c > b)) && ((b > a))) && (cljs.core._EQ_.call(null,(a_squared + b_squared),c_squared))){
cljs.core.chunk_append.call(null,b__37555,(function (){
cljs.core.println.call(null,triplet);

return triplet;
})()
);

var G__37556 = (i__37554 + (1));
i__37554 = G__37556;
continue;
} else {
var G__37557 = (i__37554 + (1));
i__37554 = G__37557;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37555),euler$problems$problem_9_$_iter__37550_$_iter__37552.call(null,cljs.core.chunk_rest.call(null,s__37553__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37555),null);
}
} else {
var b = cljs.core.first.call(null,s__37553__$2);
var c_squared = (Math.pow(b,(2)) + Math.pow(a,(2)));
var c = Math.sqrt(c_squared);
var triplet = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,c], null));
var a_squared = Math.pow(a,(2));
var b_squared = Math.pow(b,(2));
if((((c > b)) && ((b > a))) && (cljs.core._EQ_.call(null,(a_squared + b_squared),c_squared))){
return cljs.core.cons.call(null,(function (){
cljs.core.println.call(null,triplet);

return triplet;
})()
,euler$problems$problem_9_$_iter__37550_$_iter__37552.call(null,cljs.core.rest.call(null,s__37553__$2)));
} else {
var G__37558 = cljs.core.rest.call(null,s__37553__$2);
s__37553__$1 = G__37558;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__37551__$1,a,xs__6012__auto__,temp__5457__auto__))
,null,null));
});})(s__37551__$1,a,xs__6012__auto__,temp__5457__auto__))
;
var fs__31668__auto__ = cljs.core.seq.call(null,iterys__31667__auto__.call(null,cljs.core.range.call(null,(a + (1)),(1000))));
if(fs__31668__auto__){
return cljs.core.concat.call(null,fs__31668__auto__,euler$problems$problem_9_$_iter__37550.call(null,cljs.core.rest.call(null,s__37551__$1)));
} else {
var G__37559 = cljs.core.rest.call(null,s__37551__$1);
s__37551__$1 = G__37559;
continue;
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null,(1),(1000)));
})();
return cljs.core.reduce.call(null,cljs.core._STAR_,cljs.core.first.call(null,cljs.core.filter.call(null,((function (triplets){
return (function (list){
return cljs.core._EQ_.call(null,(1000),cljs.core.reduce.call(null,cljs.core._PLUS_,list));
});})(triplets))
,triplets)));
});
/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 *   Find the sum of all the primes below two million.
 */
euler.problems.problem_10 = (function euler$problems$problem_10(){
var prime_QMARK_ = (function() {
var euler$problems$problem_10_$_prime_QMARK_ = null;
var euler$problems$problem_10_$_prime_QMARK___1 = (function (n){
return euler$problems$problem_10_$_prime_QMARK_.call(null,n,(2));
});
var euler$problems$problem_10_$_prime_QMARK___2 = (function (n,start){
while(true){
if((start > Math.sqrt(n))){
return (n > (1));
} else {
if((cljs.core.mod.call(null,n,start) < (1))){
return false;
} else {
var G__37564 = n;
var G__37565 = (start + (1));
n = G__37564;
start = G__37565;
continue;

}
}
break;
}
});
euler$problems$problem_10_$_prime_QMARK_ = function(n,start){
switch(arguments.length){
case 1:
return euler$problems$problem_10_$_prime_QMARK___1.call(this,n);
case 2:
return euler$problems$problem_10_$_prime_QMARK___2.call(this,n,start);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_10_$_prime_QMARK___1;
euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_10_$_prime_QMARK___2;
return euler$problems$problem_10_$_prime_QMARK_;
})()
;
return cljs.core.reduce.call(null,cljs.core._PLUS_,(function (){var iter__31671__auto__ = (function euler$problems$problem_10_$_iter__37560(s__37561){
return (new cljs.core.LazySeq(null,(function (){
var s__37561__$1 = s__37561;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37561__$1);
if(temp__5457__auto__){
var s__37561__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37561__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37561__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37563 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37562 = (0);
while(true){
if((i__37562 < size__31670__auto__)){
var n = cljs.core._nth.call(null,c__31669__auto__,i__37562);
if(cljs.core.truth_(prime_QMARK_.call(null,n))){
if((n < (2000000))){
cljs.core.chunk_append.call(null,b__37563,n);

var G__37566 = (i__37562 + (1));
i__37562 = G__37566;
continue;
} else {
return null;
}
} else {
var G__37567 = (i__37562 + (1));
i__37562 = G__37567;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37563),euler$problems$problem_10_$_iter__37560.call(null,cljs.core.chunk_rest.call(null,s__37561__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37563),null);
}
} else {
var n = cljs.core.first.call(null,s__37561__$2);
if(cljs.core.truth_(prime_QMARK_.call(null,n))){
if((n < (2000000))){
return cljs.core.cons.call(null,n,euler$problems$problem_10_$_iter__37560.call(null,cljs.core.rest.call(null,s__37561__$2)));
} else {
return null;
}
} else {
var G__37568 = cljs.core.rest.call(null,s__37561__$2);
s__37561__$1 = G__37568;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null));
})());
});
/**
 * In the 20Ã—20 grid below, four numbers along a diagonal line have been marked in red.
 *   08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 *   49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 *   81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 *   52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 *   22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 *   24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 *   32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 *   67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 *   24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 *   21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 *   78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 *   16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 *   86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 *   19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 *   04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 *   88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 *   04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 *   20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 *   20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 *   01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
 *   The product of these numbers is 26 Ã— 63 Ã— 78 Ã— 14 = 1788696.
 *   What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20Ã—20 grid?
 */
euler.problems.problem_11 = (function euler$problems$problem_11(){
var matrix_string = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
var number_list = cljs.core.flatten.call(null,cljs.core.map.call(null,((function (matrix_string){
return (function (row){
return cljs.core.filter.call(null,cljs.core.number_QMARK_,cljs.core.map.call(null,((function (matrix_string){
return (function (string){
return (string | (0));
});})(matrix_string))
,clojure.string.split.call(null,row,/ /)));
});})(matrix_string))
,cljs.core.map.call(null,((function (matrix_string){
return (function (row){
return clojure.string.trim.call(null,row);
});})(matrix_string))
,clojure.string.split_lines.call(null,matrix_string))));
var number_matrix = cljs.core.partition.call(null,(20),number_list);
var rows = (function (){var iter__31671__auto__ = ((function (matrix_string,number_list,number_matrix){
return (function euler$problems$problem_11_$_iter__37569(s__37570){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix){
return (function (){
var s__37570__$1 = s__37570;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37570__$1);
if(temp__5457__auto__){
var s__37570__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37570__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37570__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37572 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37571 = (0);
while(true){
if((i__37571 < size__31670__auto__)){
var y = cljs.core._nth.call(null,c__31669__auto__,i__37571);
var row = cljs.core.nth.call(null,number_matrix,y);
cljs.core.chunk_append.call(null,b__37572,row);

var G__37593 = (i__37571 + (1));
i__37571 = G__37593;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37572),euler$problems$problem_11_$_iter__37569.call(null,cljs.core.chunk_rest.call(null,s__37570__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37572),null);
}
} else {
var y = cljs.core.first.call(null,s__37570__$2);
var row = cljs.core.nth.call(null,number_matrix,y);
return cljs.core.cons.call(null,row,euler$problems$problem_11_$_iter__37569.call(null,cljs.core.rest.call(null,s__37570__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix))
,null,null));
});})(matrix_string,number_list,number_matrix))
;
return iter__31671__auto__.call(null,cljs.core.range.call(null,(0),(20)));
})();
var columns = (function (){var iter__31671__auto__ = ((function (matrix_string,number_list,number_matrix,rows){
return (function euler$problems$problem_11_$_iter__37573(s__37574){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows){
return (function (){
var s__37574__$1 = s__37574;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37574__$1);
if(temp__5457__auto__){
var s__37574__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37574__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37574__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37576 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37575 = (0);
while(true){
if((i__37575 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37575);
var column = cljs.core.take_nth.call(null,(20),cljs.core.drop.call(null,x,number_list));
cljs.core.chunk_append.call(null,b__37576,column);

var G__37594 = (i__37575 + (1));
i__37575 = G__37594;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37576),euler$problems$problem_11_$_iter__37573.call(null,cljs.core.chunk_rest.call(null,s__37574__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37576),null);
}
} else {
var x = cljs.core.first.call(null,s__37574__$2);
var column = cljs.core.take_nth.call(null,(20),cljs.core.drop.call(null,x,number_list));
return cljs.core.cons.call(null,column,euler$problems$problem_11_$_iter__37573.call(null,cljs.core.rest.call(null,s__37574__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows))
,null,null));
});})(matrix_string,number_list,number_matrix,rows))
;
return iter__31671__auto__.call(null,cljs.core.range.call(null,(0),(20)));
})();
var diagonal_lr_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__31671__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns){
return (function euler$problems$problem_11_$_iter__37577(s__37578){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns){
return (function (){
var s__37578__$1 = s__37578;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37578__$1);
if(temp__5457__auto__){
var s__37578__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37578__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37578__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37580 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37579 = (0);
while(true){
if((i__37579 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37579);
var diagonal = cljs.core.take_nth.call(null,(21),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) <= (16))){
cljs.core.chunk_append.call(null,b__37580,cljs.core.partition.call(null,(4),(1),diagonal));

var G__37595 = (i__37579 + (1));
i__37579 = G__37595;
continue;
} else {
var G__37596 = (i__37579 + (1));
i__37579 = G__37596;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37580),euler$problems$problem_11_$_iter__37577.call(null,cljs.core.chunk_rest.call(null,s__37578__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37580),null);
}
} else {
var x = cljs.core.first.call(null,s__37578__$2);
var diagonal = cljs.core.take_nth.call(null,(21),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) <= (16))){
return cljs.core.cons.call(null,cljs.core.partition.call(null,(4),(1),diagonal),euler$problems$problem_11_$_iter__37577.call(null,cljs.core.rest.call(null,s__37578__$2)));
} else {
var G__37597 = cljs.core.rest.call(null,s__37578__$2);
s__37578__$1 = G__37597;
continue;
}
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns))
;
return iter__31671__auto__.call(null,cljs.core.range.call(null,(0),cljs.core.reduce.call(null,cljs.core.inc,number_list)));
})());
var diagonal_rl_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__31671__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s){
return (function euler$problems$problem_11_$_iter__37581(s__37582){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s){
return (function (){
var s__37582__$1 = s__37582;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37582__$1);
if(temp__5457__auto__){
var s__37582__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37582__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37582__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37584 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37583 = (0);
while(true){
if((i__37583 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37583);
var diagonal = cljs.core.take_nth.call(null,(19),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) >= (3))){
cljs.core.chunk_append.call(null,b__37584,cljs.core.partition.call(null,(4),(1),diagonal));

var G__37598 = (i__37583 + (1));
i__37583 = G__37598;
continue;
} else {
var G__37599 = (i__37583 + (1));
i__37583 = G__37599;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37584),euler$problems$problem_11_$_iter__37581.call(null,cljs.core.chunk_rest.call(null,s__37582__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37584),null);
}
} else {
var x = cljs.core.first.call(null,s__37582__$2);
var diagonal = cljs.core.take_nth.call(null,(19),cljs.core.drop.call(null,x,number_list));
if((cljs.core.mod.call(null,x,(20)) >= (3))){
return cljs.core.cons.call(null,cljs.core.partition.call(null,(4),(1),diagonal),euler$problems$problem_11_$_iter__37581.call(null,cljs.core.rest.call(null,s__37582__$2)));
} else {
var G__37600 = cljs.core.rest.call(null,s__37582__$2);
s__37582__$1 = G__37600;
continue;
}
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s))
;
return iter__31671__auto__.call(null,cljs.core.range.call(null,(0),cljs.core.reduce.call(null,cljs.core.inc,number_list)));
})());
var horizontal_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__31671__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s){
return (function euler$problems$problem_11_$_iter__37585(s__37586){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s){
return (function (){
var s__37586__$1 = s__37586;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37586__$1);
if(temp__5457__auto__){
var s__37586__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37586__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37586__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37588 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37587 = (0);
while(true){
if((i__37587 < size__31670__auto__)){
var row = cljs.core._nth.call(null,c__31669__auto__,i__37587);
var fours = cljs.core.partition.call(null,(4),(1),row);
cljs.core.chunk_append.call(null,b__37588,fours);

var G__37601 = (i__37587 + (1));
i__37587 = G__37601;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37588),euler$problems$problem_11_$_iter__37585.call(null,cljs.core.chunk_rest.call(null,s__37586__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37588),null);
}
} else {
var row = cljs.core.first.call(null,s__37586__$2);
var fours = cljs.core.partition.call(null,(4),(1),row);
return cljs.core.cons.call(null,fours,euler$problems$problem_11_$_iter__37585.call(null,cljs.core.rest.call(null,s__37586__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s))
;
return iter__31671__auto__.call(null,rows);
})());
var vertical_4s = cljs.core.apply.call(null,cljs.core.concat,(function (){var iter__31671__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s){
return (function euler$problems$problem_11_$_iter__37589(s__37590){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s){
return (function (){
var s__37590__$1 = s__37590;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37590__$1);
if(temp__5457__auto__){
var s__37590__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37590__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37590__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37592 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37591 = (0);
while(true){
if((i__37591 < size__31670__auto__)){
var column = cljs.core._nth.call(null,c__31669__auto__,i__37591);
var fours = cljs.core.partition.call(null,(4),(1),column);
cljs.core.chunk_append.call(null,b__37592,fours);

var G__37602 = (i__37591 + (1));
i__37591 = G__37602;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37592),euler$problems$problem_11_$_iter__37589.call(null,cljs.core.chunk_rest.call(null,s__37590__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37592),null);
}
} else {
var column = cljs.core.first.call(null,s__37590__$2);
var fours = cljs.core.partition.call(null,(4),(1),column);
return cljs.core.cons.call(null,fours,euler$problems$problem_11_$_iter__37589.call(null,cljs.core.rest.call(null,s__37590__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s))
;
return iter__31671__auto__.call(null,columns);
})());
var all_4s = cljs.core.concat.call(null,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s);
var products = cljs.core.map.call(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s,all_4s){
return (function (four){
return cljs.core.reduce.call(null,cljs.core._STAR_,four);
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s,all_4s))
,all_4s);
return cljs.core.apply.call(null,cljs.core.max,products);
});
/**
 * the sequence of triangle numbers is generated by adding the natural numbers. so the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. the first ten terms would be:
 *   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *   let us list the factors of the first seven triangle numbers:
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 *   we can see that 28 is the first triangle number to have over five divisors.
 *   what is the value of the first triangle number to have over five hundred divisors?
 */
euler.problems.problem_12 = (function euler$problems$problem_12(){
var triangle_numbers = (function (){var iter__31671__auto__ = (function euler$problems$problem_12_$_iter__37603(s__37604){
return (new cljs.core.LazySeq(null,(function (){
var s__37604__$1 = s__37604;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37604__$1);
if(temp__5457__auto__){
var s__37604__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37604__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37604__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37606 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37605 = (0);
while(true){
if((i__37605 < size__31670__auto__)){
var n = cljs.core._nth.call(null,c__31669__auto__,i__37605);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.range.call(null,(0),n));
if((sum > (0))){
cljs.core.chunk_append.call(null,b__37606,sum);

var G__37611 = (i__37605 + (1));
i__37605 = G__37611;
continue;
} else {
var G__37612 = (i__37605 + (1));
i__37605 = G__37612;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37606),euler$problems$problem_12_$_iter__37603.call(null,cljs.core.chunk_rest.call(null,s__37604__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37606),null);
}
} else {
var n = cljs.core.first.call(null,s__37604__$2);
var sum = cljs.core.reduce.call(null,cljs.core._PLUS_,cljs.core.range.call(null,(0),n));
if((sum > (0))){
return cljs.core.cons.call(null,sum,euler$problems$problem_12_$_iter__37603.call(null,cljs.core.rest.call(null,s__37604__$2)));
} else {
var G__37613 = cljs.core.rest.call(null,s__37604__$2);
s__37604__$1 = G__37613;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__31671__auto__.call(null,cljs.core.range.call(null));
})();
var factors = ((function (triangle_numbers){
return (function (n){
return cljs.core.into.call(null,cljs.core.sorted_set.call(null),cljs.core.reduce.call(null,cljs.core.concat,(function (){var iter__31671__auto__ = ((function (triangle_numbers){
return (function euler$problems$problem_12_$_iter__37607(s__37608){
return (new cljs.core.LazySeq(null,((function (triangle_numbers){
return (function (){
var s__37608__$1 = s__37608;
while(true){
var temp__5457__auto__ = cljs.core.seq.call(null,s__37608__$1);
if(temp__5457__auto__){
var s__37608__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__37608__$2)){
var c__31669__auto__ = cljs.core.chunk_first.call(null,s__37608__$2);
var size__31670__auto__ = cljs.core.count.call(null,c__31669__auto__);
var b__37610 = cljs.core.chunk_buffer.call(null,size__31670__auto__);
if((function (){var i__37609 = (0);
while(true){
if((i__37609 < size__31670__auto__)){
var x = cljs.core._nth.call(null,c__31669__auto__,i__37609);
if((cljs.core.rem.call(null,n,x) === (0))){
cljs.core.chunk_append.call(null,b__37610,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null));

var G__37614 = (i__37609 + (1));
i__37609 = G__37614;
continue;
} else {
var G__37615 = (i__37609 + (1));
i__37609 = G__37615;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37610),euler$problems$problem_12_$_iter__37607.call(null,cljs.core.chunk_rest.call(null,s__37608__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__37610),null);
}
} else {
var x = cljs.core.first.call(null,s__37608__$2);
if((cljs.core.rem.call(null,n,x) === (0))){
return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null),euler$problems$problem_12_$_iter__37607.call(null,cljs.core.rest.call(null,s__37608__$2)));
} else {
var G__37616 = cljs.core.rest.call(null,s__37608__$2);
s__37608__$1 = G__37616;
continue;
}
}
} else {
return null;
}
break;
}
});})(triangle_numbers))
,null,null));
});})(triangle_numbers))
;
return iter__31671__auto__.call(null,cljs.core.range.call(null,(1),(Math.sqrt(n) + (1))));
})()));
});})(triangle_numbers))
;
return cljs.core.first.call(null,cljs.core.filter.call(null,((function (triangle_numbers,factors){
return (function (triangle_number){
var factor_list = factors.call(null,triangle_number);
var list_length = cljs.core.reduce.call(null,((function (factor_list,triangle_numbers,factors){
return (function (count,n){
return (count + (1));
});})(factor_list,triangle_numbers,factors))
,(0),factor_list);
cljs.core.println.call(null,triangle_number,":",list_length);

return ((500) < list_length);
});})(triangle_numbers,factors))
,triangle_numbers));
});

//# sourceMappingURL=problems.js.map?rel=1511666493536
