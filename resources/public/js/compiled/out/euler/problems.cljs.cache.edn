{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name euler.problems, :imports nil, :requires {clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {problem-1 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 8, :column 7, :end-line 8, :end-column 16, :arglists (quote ([])), :doc "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n  Find the sum of all the multiples of 3 or 5 below 1000."}, :name euler.problems/problem-1, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n  Find the sum of all the multiples of 3 or 5 below 1000."}, problem-7 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 105, :column 7, :end-line 105, :end-column 16, :arglists (quote ([])), :doc "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n  What is the 10 001st prime number?"}, :name euler.problems/problem-7, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n  What is the 10 001st prime number?"}, problem-11 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 198, :column 7, :end-line 198, :end-column 17, :arglists (quote ([])), :doc "In the 20×20 grid below, four numbers along a diagonal line have been marked in red.\n  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n  What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?"}, :name euler.problems/problem-11, :variadic false, :file "src/euler/problems.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "In the 20×20 grid below, four numbers along a diagonal line have been marked in red.\n  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n  What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?"}, problem-4 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 50, :column 7, :end-line 50, :end-column 16, :arglists (quote ([])), :doc "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n  Find the largest palindrome made from the product of two 3-digit numbers."}, :name euler.problems/problem-4, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n  Find the largest palindrome made from the product of two 3-digit numbers."}, problem-3 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([])), :doc "The prime factors of 13195 are 5, 7, 13 and 29.\n  What is the largest prime factor of the number 600851475143 ?"}, :name euler.problems/problem-3, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The prime factors of 13195 are 5, 7, 13 and 29.\n  What is the largest prime factor of the number 600851475143 ?"}, problem-10 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 182, :column 7, :end-line 182, :end-column 17, :arglists (quote ([])), :doc "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n  Find the sum of all the primes below two million."}, :name euler.problems/problem-10, :variadic false, :file "src/euler/problems.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n  Find the sum of all the primes below two million."}, problem-5 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 64, :column 7, :end-line 64, :end-column 16, :arglists (quote ([])), :doc "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"}, :name euler.problems/problem-5, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"}, problem-8 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 121, :column 7, :end-line 121, :end-column 16, :arglists (quote ([])), :doc "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n  73167176531330624919225119674426574742355349194934\n  96983520312774506326239578318016984801869478851843\n  85861560789112949495459501737958331952853208805511\n  12540698747158523863050715693290963295227443043557\n  66896648950445244523161731856403098711121722383113\n  62229893423380308135336276614282806444486645238749\n  30358907296290491560440772390713810515859307960866\n  70172427121883998797908792274921901699720888093776\n  65727333001053367881220235421809751254540594752243\n  52584907711670556013604839586446706324415722155397\n  53697817977846174064955149290862569321978468622482\n  83972241375657056057490261407972968652414535100474\n  82166370484403199890008895243450658541227588666881\n  16427171479924442928230863465674813919123162824586\n  17866458359124566529476545682848912883142607690042\n  24219022671055626321111109370544217506941658960408\n  07198403850962455444362981230987879927244284909188\n  84580156166097919133875499200524063689912560717606\n  05886116467109405077541002256983155200055935729725\n  71636269561882670428252483600823257530420752963450\n  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"}, :name euler.problems/problem-8, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n  73167176531330624919225119674426574742355349194934\n  96983520312774506326239578318016984801869478851843\n  85861560789112949495459501737958331952853208805511\n  12540698747158523863050715693290963295227443043557\n  66896648950445244523161731856403098711121722383113\n  62229893423380308135336276614282806444486645238749\n  30358907296290491560440772390713810515859307960866\n  70172427121883998797908792274921901699720888093776\n  65727333001053367881220235421809751254540594752243\n  52584907711670556013604839586446706324415722155397\n  53697817977846174064955149290862569321978468622482\n  83972241375657056057490261407972968652414535100474\n  82166370484403199890008895243450658541227588666881\n  16427171479924442928230863465674813919123162824586\n  17866458359124566529476545682848912883142607690042\n  24219022671055626321111109370544217506941658960408\n  07198403850962455444362981230987879927244284909188\n  84580156166097919133875499200524063689912560717606\n  05886116467109405077541002256983155200055935729725\n  71636269561882670428252483600823257530420752963450\n  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"}, problem-6 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 88, :column 7, :end-line 88, :end-column 16, :arglists (quote ([])), :doc "The sum of the squares of the first ten natural numbers is,\n  12 + 22 + ... + 102 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 + ... + 10)2 = 552 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."}, :name euler.problems/problem-6, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The sum of the squares of the first ten natural numbers is,\n  12 + 22 + ... + 102 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 + ... + 10)2 = 552 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."}, problem-2 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 18, :column 7, :end-line 18, :end-column 16, :arglists (quote ([])), :doc "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."}, :name euler.problems/problem-2, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."}, problem-12 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 260, :column 7, :end-line 260, :end-column 17, :arglists (quote ([])), :doc "the sequence of triangle numbers is generated by adding the natural numbers. so the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. the first ten terms would be:\n  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n  let us list the factors of the first seven triangle numbers:\n  1: 1\n  3: 1,3\n  6: 1,2,3,6\n  10: 1,2,5,10\n  15: 1,3,5,15\n  21: 1,3,7,21\n  28: 1,2,4,7,14,28\n  we can see that 28 is the first triangle number to have over five divisors.\n  what is the value of the first triangle number to have over five hundred divisors?"}, :name euler.problems/problem-12, :variadic false, :file "src/euler/problems.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "the sequence of triangle numbers is generated by adding the natural numbers. so the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. the first ten terms would be:\n  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n  let us list the factors of the first seven triangle numbers:\n  1: 1\n  3: 1,3\n  6: 1,2,3,6\n  10: 1,2,5,10\n  15: 1,3,5,15\n  21: 1,3,7,21\n  28: 1,2,4,7,14,28\n  we can see that 28 is the first triangle number to have over five divisors.\n  what is the value of the first triangle number to have over five hundred divisors?"}, problem-9 {:protocol-inline nil, :meta {:file "/Users/evlouie/Workspace/project-euler/src/euler/problems.cljs", :line 154, :column 7, :end-line 154, :end-column 16, :arglists (quote ([])), :doc "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n  a2 + b2 = c2\n  For example, 32 + 42 = 9 + 16 = 25 = 52.\n  There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n  Find the product abc."}, :name euler.problems/problem-9, :variadic false, :file "src/euler/problems.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n  a2 + b2 = c2\n  For example, 32 + 42 = 9 + 16 = 25 = 52.\n  There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n  Find the product abc."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}