// Compiled by ClojureScript 1.10.238 {:static-fns true, :optimize-constants true}
goog.provide('euler.problems');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('cljs.core.match');
/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 * 
 *   Find the sum of all the multiples of 3 or 5 below 1000.
 */
euler.problems.problem_1 = (function euler$problems$problem_1(){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,(function (){var iter__4292__auto__ = (function euler$problems$problem_1_$_iter__34137(s__34138){
return (new cljs.core.LazySeq(null,(function (){
var s__34138__$1 = s__34138;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34138__$1);
if(temp__5457__auto__){
var s__34138__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34138__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34138__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34140 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34139 = (0);
while(true){
if((i__34139 < size__4291__auto__)){
var x = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34139);
if((((cljs.core.mod(x,(3)) === (0))) || ((cljs.core.mod(x,(5)) === (0))))){
cljs.core.chunk_append(b__34140,x);

var G__34141 = (i__34139 + (1));
i__34139 = G__34141;
continue;
} else {
var G__34142 = (i__34139 + (1));
i__34139 = G__34142;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34140),euler$problems$problem_1_$_iter__34137(cljs.core.chunk_rest(s__34138__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34140),null);
}
} else {
var x = cljs.core.first(s__34138__$2);
if((((cljs.core.mod(x,(3)) === (0))) || ((cljs.core.mod(x,(5)) === (0))))){
return cljs.core.cons(x,euler$problems$problem_1_$_iter__34137(cljs.core.rest(s__34138__$2)));
} else {
var G__34143 = cljs.core.rest(s__34138__$2);
s__34138__$1 = G__34143;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$1((1000)));
})());
});
goog.exportSymbol('euler.problems.problem_1', euler.problems.problem_1);
/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 *   By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
euler.problems.problem_2 = (function euler$problems$problem_2(){
var fibs = (function() {
var euler$problems$problem_2_$_fibs = null;
var euler$problems$problem_2_$_fibs__0 = (function (){
return euler$problems$problem_2_$_fibs.cljs$core$IFn$_invoke$arity$2((1),(2));
});
var euler$problems$problem_2_$_fibs__2 = (function (a,b){
return (new cljs.core.LazySeq(null,(function (){
return cljs.core.cons(a,euler$problems$problem_2_$_fibs.cljs$core$IFn$_invoke$arity$2(b,(a + b)));
}),null,null));
});
euler$problems$problem_2_$_fibs = function(a,b){
switch(arguments.length){
case 0:
return euler$problems$problem_2_$_fibs__0.call(this);
case 2:
return euler$problems$problem_2_$_fibs__2.call(this,a,b);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_2_$_fibs.cljs$core$IFn$_invoke$arity$0 = euler$problems$problem_2_$_fibs__0;
euler$problems$problem_2_$_fibs.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_2_$_fibs__2;
return euler$problems$problem_2_$_fibs;
})()
;
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__34144_SHARP_){
return (p1__34144_SHARP_ <= (4000000));
}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.even_QMARK_,fibs.cljs$core$IFn$_invoke$arity$0())));
});
goog.exportSymbol('euler.problems.problem_2', euler.problems.problem_2);
/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * 
 *   What is the largest prime factor of the number 600851475143 ?
 */
euler.problems.problem_3 = (function euler$problems$problem_3(){
var multiple_QMARK_ = (function euler$problems$problem_3_$_multiple_QMARK_(n,div){
return (cljs.core.mod(n,div) === (0));
});
var prime_factors = (function() {
var euler$problems$problem_3_$_prime_factors = null;
var euler$problems$problem_3_$_prime_factors__1 = (function (n){
return euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$3(n,(2),cljs.core.transient$(cljs.core.PersistentVector.EMPTY));
});
var euler$problems$problem_3_$_prime_factors__3 = (function (n,candidate,acc){
while(true){
if((n <= (1))){
return cljs.core.reverse(cljs.core.persistent_BANG_(acc));
} else {
if(cljs.core.truth_(multiple_QMARK_(n,candidate))){
var G__34145 = (n / candidate);
var G__34146 = candidate;
var G__34147 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,candidate);
n = G__34145;
candidate = G__34146;
acc = G__34147;
continue;
} else {
var G__34148 = n;
var G__34149 = (candidate + (1));
var G__34150 = acc;
n = G__34148;
candidate = G__34149;
acc = G__34150;
continue;

}
}
break;
}
});
euler$problems$problem_3_$_prime_factors = function(n,candidate,acc){
switch(arguments.length){
case 1:
return euler$problems$problem_3_$_prime_factors__1.call(this,n);
case 3:
return euler$problems$problem_3_$_prime_factors__3.call(this,n,candidate,acc);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_3_$_prime_factors__1;
euler$problems$problem_3_$_prime_factors.cljs$core$IFn$_invoke$arity$3 = euler$problems$problem_3_$_prime_factors__3;
return euler$problems$problem_3_$_prime_factors;
})()
;
return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,prime_factors.cljs$core$IFn$_invoke$arity$1((600851475143)));
});
goog.exportSymbol('euler.problems.problem_3', euler.problems.problem_3);
/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
 * 
 *   Find the largest palindrome made from the product of two 3-digit numbers.
 */
euler.problems.problem_4 = (function euler$problems$problem_4(){
var palindrome_QMARK_ = (function euler$problems$problem_4_$_palindrome_QMARK_(number){
return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(number)].join(''),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.reverse([cljs.core.str.cljs$core$IFn$_invoke$arity$1(number)].join(''))));
});
var largest_palindrome = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((0));
return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (largest_palindrome){
return (function (product){
if((product > cljs.core.deref(largest_palindrome))){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(largest_palindrome,((function (largest_palindrome){
return (function (_){
return product;
});})(largest_palindrome))
);

cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.deref(largest_palindrome)], 0));

return product;
} else {
return null;
}
});})(largest_palindrome))
,(function (){var iter__4292__auto__ = ((function (largest_palindrome){
return (function euler$problems$problem_4_$_iter__34151(s__34152){
return (new cljs.core.LazySeq(null,((function (largest_palindrome){
return (function (){
var s__34152__$1 = s__34152;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34152__$1);
if(temp__5457__auto__){
var xs__6012__auto__ = temp__5457__auto__;
var x = cljs.core.first(xs__6012__auto__);
var iterys__4288__auto__ = ((function (s__34152__$1,x,xs__6012__auto__,temp__5457__auto__,largest_palindrome){
return (function euler$problems$problem_4_$_iter__34151_$_iter__34153(s__34154){
return (new cljs.core.LazySeq(null,((function (s__34152__$1,x,xs__6012__auto__,temp__5457__auto__,largest_palindrome){
return (function (){
var s__34154__$1 = s__34154;
while(true){
var temp__5457__auto____$1 = cljs.core.seq(s__34154__$1);
if(temp__5457__auto____$1){
var s__34154__$2 = temp__5457__auto____$1;
if(cljs.core.chunked_seq_QMARK_(s__34154__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34154__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34156 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34155 = (0);
while(true){
if((i__34155 < size__4291__auto__)){
var y = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34155);
var product = (x * y);
if(cljs.core.truth_(palindrome_QMARK_(product))){
cljs.core.chunk_append(b__34156,product);

var G__34157 = (i__34155 + (1));
i__34155 = G__34157;
continue;
} else {
var G__34158 = (i__34155 + (1));
i__34155 = G__34158;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34156),euler$problems$problem_4_$_iter__34151_$_iter__34153(cljs.core.chunk_rest(s__34154__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34156),null);
}
} else {
var y = cljs.core.first(s__34154__$2);
var product = (x * y);
if(cljs.core.truth_(palindrome_QMARK_(product))){
return cljs.core.cons(product,euler$problems$problem_4_$_iter__34151_$_iter__34153(cljs.core.rest(s__34154__$2)));
} else {
var G__34159 = cljs.core.rest(s__34154__$2);
s__34154__$1 = G__34159;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__34152__$1,x,xs__6012__auto__,temp__5457__auto__,largest_palindrome))
,null,null));
});})(s__34152__$1,x,xs__6012__auto__,temp__5457__auto__,largest_palindrome))
;
var fs__4289__auto__ = cljs.core.seq(iterys__4288__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$1((1000))));
if(fs__4289__auto__){
return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4289__auto__,euler$problems$problem_4_$_iter__34151(cljs.core.rest(s__34152__$1)));
} else {
var G__34160 = cljs.core.rest(s__34152__$1);
s__34152__$1 = G__34160;
continue;
}
} else {
return null;
}
break;
}
});})(largest_palindrome))
,null,null));
});})(largest_palindrome))
;
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$1((1000)));
})()));
});
goog.exportSymbol('euler.problems.problem_4', euler.problems.problem_4);
/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * 
 *   What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
euler.problems.problem_5 = (function euler$problems$problem_5(){
var divisors = cljs.core.range.cljs$core$IFn$_invoke$arity$3((19),(10),(-1));
return cljs.core.first((function (){var iter__4292__auto__ = ((function (divisors){
return (function euler$problems$problem_5_$_iter__34161(s__34162){
return (new cljs.core.LazySeq(null,((function (divisors){
return (function (){
var s__34162__$1 = s__34162;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34162__$1);
if(temp__5457__auto__){
var s__34162__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34162__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34162__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34164 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34163 = (0);
while(true){
if((i__34163 < size__4291__auto__)){
var n = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34163);
if((function (){
if((cljs.core.rem(n,(10000000)) === (0))){
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n], 0));
} else {
}

return cljs.core.every_QMARK_(cljs.core.zero_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (i__34163,s__34162__$1,n,c__4290__auto__,size__4291__auto__,b__34164,s__34162__$2,temp__5457__auto__,divisors){
return (function (divisor){
return cljs.core.rem(n,divisor);
});})(i__34163,s__34162__$1,n,c__4290__auto__,size__4291__auto__,b__34164,s__34162__$2,temp__5457__auto__,divisors))
,divisors));
})()
){
cljs.core.chunk_append(b__34164,n);

var G__34165 = (i__34163 + (1));
i__34163 = G__34165;
continue;
} else {
var G__34166 = (i__34163 + (1));
i__34163 = G__34166;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34164),euler$problems$problem_5_$_iter__34161(cljs.core.chunk_rest(s__34162__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34164),null);
}
} else {
var n = cljs.core.first(s__34162__$2);
if((function (){
if((cljs.core.rem(n,(10000000)) === (0))){
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n], 0));
} else {
}

return cljs.core.every_QMARK_(cljs.core.zero_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (s__34162__$1,n,s__34162__$2,temp__5457__auto__,divisors){
return (function (divisor){
return cljs.core.rem(n,divisor);
});})(s__34162__$1,n,s__34162__$2,temp__5457__auto__,divisors))
,divisors));
})()
){
return cljs.core.cons(n,euler$problems$problem_5_$_iter__34161(cljs.core.rest(s__34162__$2)));
} else {
var G__34167 = cljs.core.rest(s__34162__$2);
s__34162__$1 = G__34167;
continue;
}
}
} else {
return null;
}
break;
}
});})(divisors))
,null,null));
});})(divisors))
;
return iter__4292__auto__(cljs.core.iterate(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,(20)),(20)));
})());
});
goog.exportSymbol('euler.problems.problem_5', euler.problems.problem_5);
/**
 * The sum of the squares of the first ten natural numbers is,
 * 
 *   1^2 + 2^2 + ... + 102 = 385
 *   The square of the sum of the first ten natural numbers is,
 * 
 *   (1 + 2 + ... + 10)^2 = 55^2 = 3025
 *   Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.
 * 
 *   Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
euler.problems.problem_6 = (function euler$problems$problem_6(){
var sum_of_squares = (function euler$problems$problem_6_$_sum_of_squares(up_to){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (n){
return (n * n);
}),cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(up_to + (1)))));
});
var square_of_sum = (function euler$problems$problem_6_$_square_of_sum(up_to){
var G__34170 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(up_to + (1))));
var G__34171 = (2);
return Math.pow(G__34170,G__34171);
});
return (square_of_sum((100)) - sum_of_squares((100)));
});
goog.exportSymbol('euler.problems.problem_6', euler.problems.problem_6);
/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * 
 *   What is the 10 001st prime number?
 */
euler.problems.problem_7 = (function euler$problems$problem_7(){
var primes = (function() {
var euler$problems$problem_7_$_primes = null;
var euler$problems$problem_7_$_primes__0 = (function (){
return (new cljs.core.LazySeq(null,(function (){
return cljs.core.cons((2),euler$problems$problem_7_$_primes.cljs$core$IFn$_invoke$arity$2((3),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2)], null)));
}),null,null));
});
var euler$problems$problem_7_$_primes__2 = (function (potential,prev_primes){
var divisors = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__34172_SHARP_){
return (p1__34172_SHARP_ <= Math.sqrt(potential));
}),prev_primes);
if(cljs.core.truth_(cljs.core.some(((function (divisors){
return (function (p1__34173_SHARP_){
return (cljs.core.mod(potential,p1__34173_SHARP_) === (0));
});})(divisors))
,divisors))){
return (new cljs.core.LazySeq(null,((function (divisors){
return (function (){
return euler$problems$problem_7_$_primes.cljs$core$IFn$_invoke$arity$2((potential + (1)),prev_primes);
});})(divisors))
,null,null));
} else {
return (new cljs.core.LazySeq(null,((function (divisors){
return (function (){
return cljs.core.cons(potential,euler$problems$problem_7_$_primes.cljs$core$IFn$_invoke$arity$2((potential + (1)),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(prev_primes,potential)));
});})(divisors))
,null,null));
}
});
euler$problems$problem_7_$_primes = function(potential,prev_primes){
switch(arguments.length){
case 0:
return euler$problems$problem_7_$_primes__0.call(this);
case 2:
return euler$problems$problem_7_$_primes__2.call(this,potential,prev_primes);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_7_$_primes.cljs$core$IFn$_invoke$arity$0 = euler$problems$problem_7_$_primes__0;
euler$problems$problem_7_$_primes.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_7_$_primes__2;
return euler$problems$problem_7_$_primes;
})()
;
return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(primes.cljs$core$IFn$_invoke$arity$0(),(10001));
});
goog.exportSymbol('euler.problems.problem_7', euler.problems.problem_7);
/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 Ã— 9 Ã— 8 Ã— 9 = 5832.
 * 
 *   73167176531330624919225119674426574742355349194934
 *   96983520312774506326239578318016984801869478851843
 *   85861560789112949495459501737958331952853208805511
 *   12540698747158523863050715693290963295227443043557
 *   66896648950445244523161731856403098711121722383113
 *   62229893423380308135336276614282806444486645238749
 *   30358907296290491560440772390713810515859307960866
 *   70172427121883998797908792274921901699720888093776
 *   65727333001053367881220235421809751254540594752243
 *   52584907711670556013604839586446706324415722155397
 *   53697817977846174064955149290862569321978468622482
 *   83972241375657056057490261407972968652414535100474
 *   82166370484403199890008895243450658541227588666881
 *   16427171479924442928230863465674813919123162824586
 *   17866458359124566529476545682848912883142607690042
 *   24219022671055626321111109370544217506941658960408
 *   07198403850962455444362981230987879927244284909188
 *   84580156166097919133875499200524063689912560717606
 *   05886116467109405077541002256983155200055935729725
 *   71636269561882670428252483600823257530420752963450
 * 
 *   Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
euler.problems.problem_8 = (function euler$problems$problem_8(){
var big_number_string = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
var number_chars = clojure.string.split.cljs$core$IFn$_invoke$arity$2(big_number_string,(new RegExp("")));
return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (big_number_string,number_chars){
return (function (list){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._STAR_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (big_number_string,number_chars){
return (function (p1__34174_SHARP_){
return Number.parseInt(p1__34174_SHARP_);
});})(big_number_string,number_chars))
,list));
});})(big_number_string,number_chars))
,cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3((13),(1),number_chars)));
});
goog.exportSymbol('euler.problems.problem_8', euler.problems.problem_8);
/**
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 * 
 *   a^2 + b^2 = c^2
 *   For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 * 
 *   There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 *   Find the product abc.
 */
euler.problems.problem_9 = (function euler$problems$problem_9(){
var triplets = (function euler$problems$problem_9_$_triplets(){
var iter__4292__auto__ = (function euler$problems$problem_9_$_triplets_$_iter__34183(s__34184){
return (new cljs.core.LazySeq(null,(function (){
var s__34184__$1 = s__34184;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34184__$1);
if(temp__5457__auto__){
var xs__6012__auto__ = temp__5457__auto__;
var a = cljs.core.first(xs__6012__auto__);
var iterys__4288__auto__ = ((function (s__34184__$1,a,xs__6012__auto__,temp__5457__auto__){
return (function euler$problems$problem_9_$_triplets_$_iter__34183_$_iter__34185(s__34186){
return (new cljs.core.LazySeq(null,((function (s__34184__$1,a,xs__6012__auto__,temp__5457__auto__){
return (function (){
var s__34186__$1 = s__34186;
while(true){
var temp__5457__auto____$1 = cljs.core.seq(s__34186__$1);
if(temp__5457__auto____$1){
var s__34186__$2 = temp__5457__auto____$1;
if(cljs.core.chunked_seq_QMARK_(s__34186__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34186__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34188 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34187 = (0);
while(true){
if((i__34187 < size__4291__auto__)){
var b = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34187);
var c_squared = (Math.pow(b,(2)) + Math.pow(a,(2)));
var c_float = Math.sqrt(c_squared);
var a_squared = Math.pow(a,(2));
var b_squared = Math.pow(b,(2));
if(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((c_float | (0)),c_float)) && ((c_float > b)) && ((b > a)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((a_squared + b_squared),c_squared)))){
cljs.core.chunk_append(b__34188,(function (){var triplet = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,(c_float | (0))], null);
return triplet;
})());

var G__34189 = (i__34187 + (1));
i__34187 = G__34189;
continue;
} else {
var G__34190 = (i__34187 + (1));
i__34187 = G__34190;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34188),euler$problems$problem_9_$_triplets_$_iter__34183_$_iter__34185(cljs.core.chunk_rest(s__34186__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34188),null);
}
} else {
var b = cljs.core.first(s__34186__$2);
var c_squared = (Math.pow(b,(2)) + Math.pow(a,(2)));
var c_float = Math.sqrt(c_squared);
var a_squared = Math.pow(a,(2));
var b_squared = Math.pow(b,(2));
if(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((c_float | (0)),c_float)) && ((c_float > b)) && ((b > a)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((a_squared + b_squared),c_squared)))){
return cljs.core.cons((function (){var triplet = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,(c_float | (0))], null);
return triplet;
})(),euler$problems$problem_9_$_triplets_$_iter__34183_$_iter__34185(cljs.core.rest(s__34186__$2)));
} else {
var G__34191 = cljs.core.rest(s__34186__$2);
s__34186__$1 = G__34191;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__34184__$1,a,xs__6012__auto__,temp__5457__auto__))
,null,null));
});})(s__34184__$1,a,xs__6012__auto__,temp__5457__auto__))
;
var fs__4289__auto__ = cljs.core.seq(iterys__4288__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((a + (1)),(1000))));
if(fs__4289__auto__){
return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4289__auto__,euler$problems$problem_9_$_triplets_$_iter__34183(cljs.core.rest(s__34184__$1)));
} else {
var G__34192 = cljs.core.rest(s__34184__$1);
s__34184__$1 = G__34192;
continue;
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(1000)));
});
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._STAR_,cljs.core.first(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__34176_SHARP_){
return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1000),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,p1__34176_SHARP_));
}),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__34175_SHARP_){
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p1__34175_SHARP_], 0));

return p1__34175_SHARP_;
}),triplets()))));
});
goog.exportSymbol('euler.problems.problem_9', euler.problems.problem_9);
/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 * 
 *   Find the sum of all the primes below two million.
 */
euler.problems.problem_10 = (function euler$problems$problem_10(){
var prime_QMARK_ = (function() {
var euler$problems$problem_10_$_prime_QMARK_ = null;
var euler$problems$problem_10_$_prime_QMARK___1 = (function (n){
return euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$2(n,(2));
});
var euler$problems$problem_10_$_prime_QMARK___2 = (function (n,divisor){
while(true){
if((divisor > Math.sqrt(n))){
return (n > (1));
} else {
if((cljs.core.mod(n,divisor) < (1))){
return false;
} else {
var G__34197 = n;
var G__34198 = (divisor + (1));
n = G__34197;
divisor = G__34198;
continue;

}
}
break;
}
});
euler$problems$problem_10_$_prime_QMARK_ = function(n,divisor){
switch(arguments.length){
case 1:
return euler$problems$problem_10_$_prime_QMARK___1.call(this,n);
case 2:
return euler$problems$problem_10_$_prime_QMARK___2.call(this,n,divisor);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_10_$_prime_QMARK___1;
euler$problems$problem_10_$_prime_QMARK_.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_10_$_prime_QMARK___2;
return euler$problems$problem_10_$_prime_QMARK_;
})()
;
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__34196_SHARP_){
return (p1__34196_SHARP_ <= (2000000));
}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(prime_QMARK_,cljs.core.range.cljs$core$IFn$_invoke$arity$0())));
});
goog.exportSymbol('euler.problems.problem_10', euler.problems.problem_10);
/**
 * In the 20Ã—20 grid below, four numbers along a diagonal line have been marked in red.
 * 
 *   08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 *   49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 *   81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 *   52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 *   22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 *   24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 *   32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 *   67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 *   24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 *   21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 *   78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 *   16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 *   86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 *   19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 *   04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 *   88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 *   04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 *   20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 *   20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 *   01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
 * 
 *   The product of these numbers is 26 Ã— 63 Ã— 78 Ã— 14 = 1788696.
 * 
 *   What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20Ã—20 grid?
 */
euler.problems.problem_11 = (function euler$problems$problem_11(){
var matrix_string = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
var number_list = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (matrix_string){
return (function (row){
return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.number_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (matrix_string){
return (function (string){
return (string | (0));
});})(matrix_string))
,clojure.string.split.cljs$core$IFn$_invoke$arity$2(row,/ /)));
});})(matrix_string))
,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (matrix_string){
return (function (row){
return clojure.string.trim(row);
});})(matrix_string))
,clojure.string.split_lines(matrix_string))));
var number_matrix = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((20),number_list);
var rows = (function (){var iter__4292__auto__ = ((function (matrix_string,number_list,number_matrix){
return (function euler$problems$problem_11_$_iter__34199(s__34200){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix){
return (function (){
var s__34200__$1 = s__34200;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34200__$1);
if(temp__5457__auto__){
var s__34200__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34200__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34200__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34202 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34201 = (0);
while(true){
if((i__34201 < size__4291__auto__)){
var y = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34201);
var row = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(number_matrix,y);
cljs.core.chunk_append(b__34202,row);

var G__34223 = (i__34201 + (1));
i__34201 = G__34223;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34202),euler$problems$problem_11_$_iter__34199(cljs.core.chunk_rest(s__34200__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34202),null);
}
} else {
var y = cljs.core.first(s__34200__$2);
var row = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(number_matrix,y);
return cljs.core.cons(row,euler$problems$problem_11_$_iter__34199(cljs.core.rest(s__34200__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix))
,null,null));
});})(matrix_string,number_list,number_matrix))
;
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((0),(20)));
})();
var columns = (function (){var iter__4292__auto__ = ((function (matrix_string,number_list,number_matrix,rows){
return (function euler$problems$problem_11_$_iter__34203(s__34204){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows){
return (function (){
var s__34204__$1 = s__34204;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34204__$1);
if(temp__5457__auto__){
var s__34204__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34204__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34204__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34206 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34205 = (0);
while(true){
if((i__34205 < size__4291__auto__)){
var x = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34205);
var column = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((20),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(x,number_list));
cljs.core.chunk_append(b__34206,column);

var G__34224 = (i__34205 + (1));
i__34205 = G__34224;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34206),euler$problems$problem_11_$_iter__34203(cljs.core.chunk_rest(s__34204__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34206),null);
}
} else {
var x = cljs.core.first(s__34204__$2);
var column = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((20),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(x,number_list));
return cljs.core.cons(column,euler$problems$problem_11_$_iter__34203(cljs.core.rest(s__34204__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows))
,null,null));
});})(matrix_string,number_list,number_matrix,rows))
;
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((0),(20)));
})();
var diagonal_lr_4s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,(function (){var iter__4292__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns){
return (function euler$problems$problem_11_$_iter__34207(s__34208){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns){
return (function (){
var s__34208__$1 = s__34208;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34208__$1);
if(temp__5457__auto__){
var s__34208__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34208__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34208__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34210 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34209 = (0);
while(true){
if((i__34209 < size__4291__auto__)){
var x = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34209);
var diagonal = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((21),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(x,number_list));
if((cljs.core.mod(x,(20)) <= (16))){
cljs.core.chunk_append(b__34210,cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),diagonal));

var G__34225 = (i__34209 + (1));
i__34209 = G__34225;
continue;
} else {
var G__34226 = (i__34209 + (1));
i__34209 = G__34226;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34210),euler$problems$problem_11_$_iter__34207(cljs.core.chunk_rest(s__34208__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34210),null);
}
} else {
var x = cljs.core.first(s__34208__$2);
var diagonal = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((21),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(x,number_list));
if((cljs.core.mod(x,(20)) <= (16))){
return cljs.core.cons(cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),diagonal),euler$problems$problem_11_$_iter__34207(cljs.core.rest(s__34208__$2)));
} else {
var G__34227 = cljs.core.rest(s__34208__$2);
s__34208__$1 = G__34227;
continue;
}
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns))
;
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((0),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,number_list)));
})());
var diagonal_rl_4s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,(function (){var iter__4292__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s){
return (function euler$problems$problem_11_$_iter__34211(s__34212){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s){
return (function (){
var s__34212__$1 = s__34212;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34212__$1);
if(temp__5457__auto__){
var s__34212__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34212__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34212__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34214 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34213 = (0);
while(true){
if((i__34213 < size__4291__auto__)){
var x = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34213);
var diagonal = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((19),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(x,number_list));
if((cljs.core.mod(x,(20)) >= (3))){
cljs.core.chunk_append(b__34214,cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),diagonal));

var G__34228 = (i__34213 + (1));
i__34213 = G__34228;
continue;
} else {
var G__34229 = (i__34213 + (1));
i__34213 = G__34229;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34214),euler$problems$problem_11_$_iter__34211(cljs.core.chunk_rest(s__34212__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34214),null);
}
} else {
var x = cljs.core.first(s__34212__$2);
var diagonal = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((19),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(x,number_list));
if((cljs.core.mod(x,(20)) >= (3))){
return cljs.core.cons(cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),diagonal),euler$problems$problem_11_$_iter__34211(cljs.core.rest(s__34212__$2)));
} else {
var G__34230 = cljs.core.rest(s__34212__$2);
s__34212__$1 = G__34230;
continue;
}
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s))
;
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((0),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,number_list)));
})());
var horizontal_4s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,(function (){var iter__4292__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s){
return (function euler$problems$problem_11_$_iter__34215(s__34216){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s){
return (function (){
var s__34216__$1 = s__34216;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34216__$1);
if(temp__5457__auto__){
var s__34216__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34216__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34216__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34218 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34217 = (0);
while(true){
if((i__34217 < size__4291__auto__)){
var row = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34217);
var fours = cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),row);
cljs.core.chunk_append(b__34218,fours);

var G__34231 = (i__34217 + (1));
i__34217 = G__34231;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34218),euler$problems$problem_11_$_iter__34215(cljs.core.chunk_rest(s__34216__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34218),null);
}
} else {
var row = cljs.core.first(s__34216__$2);
var fours = cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),row);
return cljs.core.cons(fours,euler$problems$problem_11_$_iter__34215(cljs.core.rest(s__34216__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s))
;
return iter__4292__auto__(rows);
})());
var vertical_4s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,(function (){var iter__4292__auto__ = ((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s){
return (function euler$problems$problem_11_$_iter__34219(s__34220){
return (new cljs.core.LazySeq(null,((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s){
return (function (){
var s__34220__$1 = s__34220;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34220__$1);
if(temp__5457__auto__){
var s__34220__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34220__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34220__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34222 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34221 = (0);
while(true){
if((i__34221 < size__4291__auto__)){
var column = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34221);
var fours = cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),column);
cljs.core.chunk_append(b__34222,fours);

var G__34232 = (i__34221 + (1));
i__34221 = G__34232;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34222),euler$problems$problem_11_$_iter__34219(cljs.core.chunk_rest(s__34220__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34222),null);
}
} else {
var column = cljs.core.first(s__34220__$2);
var fours = cljs.core.partition.cljs$core$IFn$_invoke$arity$3((4),(1),column);
return cljs.core.cons(fours,euler$problems$problem_11_$_iter__34219(cljs.core.rest(s__34220__$2)));
}
} else {
return null;
}
break;
}
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s))
,null,null));
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s))
;
return iter__4292__auto__(columns);
})());
var all_4s = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(diagonal_lr_4s,diagonal_rl_4s,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([horizontal_4s,vertical_4s], 0));
var products = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s,all_4s){
return (function (four){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._STAR_,four);
});})(matrix_string,number_list,number_matrix,rows,columns,diagonal_lr_4s,diagonal_rl_4s,horizontal_4s,vertical_4s,all_4s))
,all_4s);
return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,products);
});
goog.exportSymbol('euler.problems.problem_11', euler.problems.problem_11);
/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 *   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 *   Let us list the factors of the first seven triangle numbers:
 * 
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 *   We can see that 28 is the first triangle number to have over five divisors.
 * 
 *   What is the value of the first triangle number to have over five hundred divisors?
 */
euler.problems.problem_12 = (function euler$problems$problem_12(){
var triangles = (function() {
var euler$problems$problem_12_$_triangles = null;
var euler$problems$problem_12_$_triangles__0 = (function (){
return euler$problems$problem_12_$_triangles.cljs$core$IFn$_invoke$arity$2((1),(0));
});
var euler$problems$problem_12_$_triangles__2 = (function (n,sum){
var next_sum = (sum + n);
return (new cljs.core.LazySeq(null,((function (next_sum){
return (function (){
return cljs.core.cons(next_sum,euler$problems$problem_12_$_triangles.cljs$core$IFn$_invoke$arity$2((n + (1)),next_sum));
});})(next_sum))
,null,null));
});
euler$problems$problem_12_$_triangles = function(n,sum){
switch(arguments.length){
case 0:
return euler$problems$problem_12_$_triangles__0.call(this);
case 2:
return euler$problems$problem_12_$_triangles__2.call(this,n,sum);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_12_$_triangles.cljs$core$IFn$_invoke$arity$0 = euler$problems$problem_12_$_triangles__0;
euler$problems$problem_12_$_triangles.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_12_$_triangles__2;
return euler$problems$problem_12_$_triangles;
})()
;
var factors = (function euler$problems$problem_12_$_factors(n){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,(function (){var iter__4292__auto__ = (function euler$problems$problem_12_$_factors_$_iter__34237(s__34238){
return (new cljs.core.LazySeq(null,(function (){
var s__34238__$1 = s__34238;
while(true){
var temp__5457__auto__ = cljs.core.seq(s__34238__$1);
if(temp__5457__auto__){
var s__34238__$2 = temp__5457__auto__;
if(cljs.core.chunked_seq_QMARK_(s__34238__$2)){
var c__4290__auto__ = cljs.core.chunk_first(s__34238__$2);
var size__4291__auto__ = cljs.core.count(c__4290__auto__);
var b__34240 = cljs.core.chunk_buffer(size__4291__auto__);
if((function (){var i__34239 = (0);
while(true){
if((i__34239 < size__4291__auto__)){
var x = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4290__auto__,i__34239);
if((cljs.core.rem(n,x) === (0))){
cljs.core.chunk_append(b__34240,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null));

var G__34249 = (i__34239 + (1));
i__34239 = G__34249;
continue;
} else {
var G__34250 = (i__34239 + (1));
i__34239 = G__34250;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__34240),euler$problems$problem_12_$_factors_$_iter__34237(cljs.core.chunk_rest(s__34238__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__34240),null);
}
} else {
var x = cljs.core.first(s__34238__$2);
if((cljs.core.rem(n,x) === (0))){
return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(n / x)], null),euler$problems$problem_12_$_factors_$_iter__34237(cljs.core.rest(s__34238__$2)));
} else {
var G__34251 = cljs.core.rest(s__34238__$2);
s__34238__$1 = G__34251;
continue;
}
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__4292__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(Math.sqrt(n) + (1))));
})());
});
var running_max = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$n,(0),cljs.core.cst$kw$factor_DASH_count,(0)], null));
var seq__34241_34252 = cljs.core.seq(triangles.cljs$core$IFn$_invoke$arity$0());
var chunk__34244_34253 = null;
var count__34245_34254 = (0);
var i__34246_34255 = (0);
while(true){
if((i__34246_34255 < count__34245_34254)){
var triangle_34256 = chunk__34244_34253.cljs$core$IIndexed$_nth$arity$2(null,i__34246_34255);
var f_34257 = factors(triangle_34256);
var f_count_34258 = cljs.core.count(f_34257);
var f_map_34259 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$n,triangle_34256,cljs.core.cst$kw$factor_DASH_count,f_count_34258], null);
if(((500) > cljs.core.cst$kw$factor_DASH_count.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(running_max)))){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(running_max,((function (seq__34241_34252,chunk__34244_34253,count__34245_34254,i__34246_34255,f_34257,f_count_34258,f_map_34259,triangle_34256,running_max){
return (function (_){
return f_map_34259;
});})(seq__34241_34252,chunk__34244_34253,count__34245_34254,i__34246_34255,f_34257,f_count_34258,f_map_34259,triangle_34256,running_max))
);

cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([f_map_34259], 0));


var G__34260 = seq__34241_34252;
var G__34261 = chunk__34244_34253;
var G__34262 = count__34245_34254;
var G__34263 = (i__34246_34255 + (1));
seq__34241_34252 = G__34260;
chunk__34244_34253 = G__34261;
count__34245_34254 = G__34262;
i__34246_34255 = G__34263;
continue;
} else {
}
} else {
var temp__5457__auto___34264 = cljs.core.seq(seq__34241_34252);
if(temp__5457__auto___34264){
var seq__34241_34265__$1 = temp__5457__auto___34264;
if(cljs.core.chunked_seq_QMARK_(seq__34241_34265__$1)){
var c__4319__auto___34266 = cljs.core.chunk_first(seq__34241_34265__$1);
var G__34267 = cljs.core.chunk_rest(seq__34241_34265__$1);
var G__34268 = c__4319__auto___34266;
var G__34269 = cljs.core.count(c__4319__auto___34266);
var G__34270 = (0);
seq__34241_34252 = G__34267;
chunk__34244_34253 = G__34268;
count__34245_34254 = G__34269;
i__34246_34255 = G__34270;
continue;
} else {
var triangle_34271 = cljs.core.first(seq__34241_34265__$1);
var f_34272 = factors(triangle_34271);
var f_count_34273 = cljs.core.count(f_34272);
var f_map_34274 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$n,triangle_34271,cljs.core.cst$kw$factor_DASH_count,f_count_34273], null);
if(((500) > cljs.core.cst$kw$factor_DASH_count.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(running_max)))){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(running_max,((function (seq__34241_34252,chunk__34244_34253,count__34245_34254,i__34246_34255,f_34272,f_count_34273,f_map_34274,triangle_34271,seq__34241_34265__$1,temp__5457__auto___34264,running_max){
return (function (_){
return f_map_34274;
});})(seq__34241_34252,chunk__34244_34253,count__34245_34254,i__34246_34255,f_34272,f_count_34273,f_map_34274,triangle_34271,seq__34241_34265__$1,temp__5457__auto___34264,running_max))
);

cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([f_map_34274], 0));


var G__34275 = cljs.core.next(seq__34241_34265__$1);
var G__34276 = null;
var G__34277 = (0);
var G__34278 = (0);
seq__34241_34252 = G__34275;
chunk__34244_34253 = G__34276;
count__34245_34254 = G__34277;
i__34246_34255 = G__34278;
continue;
} else {
}
}
} else {
}
}
break;
}

return cljs.core.cst$kw$n.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(running_max));
});
goog.exportSymbol('euler.problems.problem_12', euler.problems.problem_12);
/**
 * Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
 * 
 *   37107287533902102798797998220837590246510135740250
 *   46376937677490009712648124896970078050417018260538
 *   74324986199524741059474233309513058123726617309629
 *   91942213363574161572522430563301811072406154908250
 *   23067588207539346171171980310421047513778063246676
 *   89261670696623633820136378418383684178734361726757
 *   28112879812849979408065481931592621691275889832738
 *   44274228917432520321923589422876796487670272189318
 *   47451445736001306439091167216856844588711603153276
 *   70386486105843025439939619828917593665686757934951
 *   62176457141856560629502157223196586755079324193331
 *   64906352462741904929101432445813822663347944758178
 *   92575867718337217661963751590579239728245598838407
 *   58203565325359399008402633568948830189458628227828
 *   80181199384826282014278194139940567587151170094390
 *   35398664372827112653829987240784473053190104293586
 *   86515506006295864861532075273371959191420517255829
 *   71693888707715466499115593487603532921714970056938
 *   54370070576826684624621495650076471787294438377604
 *   53282654108756828443191190634694037855217779295145
 *   36123272525000296071075082563815656710885258350721
 *   45876576172410976447339110607218265236877223636045
 *   17423706905851860660448207621209813287860733969412
 *   81142660418086830619328460811191061556940512689692
 *   51934325451728388641918047049293215058642563049483
 *   62467221648435076201727918039944693004732956340691
 *   15732444386908125794514089057706229429197107928209
 *   55037687525678773091862540744969844508330393682126
 *   18336384825330154686196124348767681297534375946515
 *   80386287592878490201521685554828717201219257766954
 *   78182833757993103614740356856449095527097864797581
 *   16726320100436897842553539920931837441497806860984
 *   48403098129077791799088218795327364475675590848030
 *   87086987551392711854517078544161852424320693150332
 *   59959406895756536782107074926966537676326235447210
 *   69793950679652694742597709739166693763042633987085
 *   41052684708299085211399427365734116182760315001271
 *   65378607361501080857009149939512557028198746004375
 *   35829035317434717326932123578154982629742552737307
 *   94953759765105305946966067683156574377167401875275
 *   88902802571733229619176668713819931811048770190271
 *   25267680276078003013678680992525463401061632866526
 *   36270218540497705585629946580636237993140746255962
 *   24074486908231174977792365466257246923322810917141
 *   91430288197103288597806669760892938638285025333403
 *   34413065578016127815921815005561868836468420090470
 *   23053081172816430487623791969842487255036638784583
 *   11487696932154902810424020138335124462181441773470
 *   63783299490636259666498587618221225225512486764533
 *   67720186971698544312419572409913959008952310058822
 *   95548255300263520781532296796249481641953868218774
 *   76085327132285723110424803456124867697064507995236
 *   37774242535411291684276865538926205024910326572967
 *   23701913275725675285653248258265463092207058596522
 *   29798860272258331913126375147341994889534765745501
 *   18495701454879288984856827726077713721403798879715
 *   38298203783031473527721580348144513491373226651381
 *   34829543829199918180278916522431027392251122869539
 *   40957953066405232632538044100059654939159879593635
 *   29746152185502371307642255121183693803580388584903
 *   41698116222072977186158236678424689157993532961922
 *   62467957194401269043877107275048102390895523597457
 *   23189706772547915061505504953922979530901129967519
 *   86188088225875314529584099251203829009407770775672
 *   11306739708304724483816533873502340845647058077308
 *   82959174767140363198008187129011875491310547126581
 *   97623331044818386269515456334926366572897563400500
 *   42846280183517070527831839425882145521227251250327
 *   55121603546981200581762165212827652751691296897789
 *   32238195734329339946437501907836945765883352399886
 *   75506164965184775180738168837861091527357929701337
 *   62177842752192623401942399639168044983993173312731
 *   32924185707147349566916674687634660915035914677504
 *   99518671430235219628894890102423325116913619626622
 *   73267460800591547471830798392868535206946944540724
 *   76841822524674417161514036427982273348055556214818
 *   97142617910342598647204516893989422179826088076852
 *   87783646182799346313767754307809363333018982642090
 *   10848802521674670883215120185883543223812876952786
 *   71329612474782464538636993009049310363619763878039
 *   62184073572399794223406235393808339651327408011116
 *   66627891981488087797941876876144230030984490851411
 *   60661826293682836764744779239180335110989069790714
 *   85786944089552990653640447425576083659976645795096
 *   66024396409905389607120198219976047599490197230297
 *   64913982680032973156037120041377903785566085089252
 *   16730939319872750275468906903707539413042652315011
 *   94809377245048795150954100921645863754710598436791
 *   78639167021187492431995700641917969777599028300699
 *   15368713711936614952811305876380278410754449733078
 *   40789923115535562561142322423255033685442488917353
 *   44889911501440648020369068063960672322193204149535
 *   41503128880339536053299340368006977710650566631954
 *   81234880673210146739058568557934581403627822703280
 *   82616570773948327592232845941706525094512325230608
 *   22918802058777319719839450180888072429661980811197
 *   77158542502016545090413245809786882778948721859617
 *   72107838435069186155435662884062257473692284509516
 *   20849603980134001723930671666823555245252804609722
 *   53503534226472524250874054075591789781264330331690
 *   
 */
euler.problems.problem_13 = (function euler$problems$problem_13(){
var number_string = "37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690";
var numbers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.string.trim,clojure.string.split_lines(number_string));
var sum = cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,numbers);
var add_list_columns = ((function (number_string,numbers,sum){
return (function() {
var euler$problems$problem_13_$_add_list_columns = null;
var euler$problems$problem_13_$_add_list_columns__2 = (function (x,y){
return euler$problems$problem_13_$_add_list_columns.cljs$core$IFn$_invoke$arity$4(x,y,(0),cljs.core.List.EMPTY);
});
var euler$problems$problem_13_$_add_list_columns__4 = (function (x,y,carry,sum__$1){
while(true){
if((((cljs.core.first(x) == null)) && ((cljs.core.first(y) == null)))){
return cljs.core.reverse((((carry === (0)))?sum__$1:cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sum__$1,carry)));
} else {
var x_curr = ((((0) < cljs.core.count(x)))?cljs.core.first(x):(0));
var y_curr = ((((0) < cljs.core.count(y)))?cljs.core.first(y):(0));
var x_rest = cljs.core.rest(x);
var y_rest = cljs.core.rest(y);
var curr_sum = cljs.core.mod(((x_curr + y_curr) + carry),(10));
var curr_carry = cljs.core.quot(((x_curr + y_curr) + carry),(10));
var G__34279 = x_rest;
var G__34280 = y_rest;
var G__34281 = curr_carry;
var G__34282 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sum__$1,curr_sum);
x = G__34279;
y = G__34280;
carry = G__34281;
sum__$1 = G__34282;
continue;

}
break;
}
});
euler$problems$problem_13_$_add_list_columns = function(x,y,carry,sum__$1){
switch(arguments.length){
case 2:
return euler$problems$problem_13_$_add_list_columns__2.call(this,x,y);
case 4:
return euler$problems$problem_13_$_add_list_columns__4.call(this,x,y,carry,sum__$1);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_13_$_add_list_columns.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_13_$_add_list_columns__2;
euler$problems$problem_13_$_add_list_columns.cljs$core$IFn$_invoke$arity$4 = euler$problems$problem_13_$_add_list_columns__4;
return euler$problems$problem_13_$_add_list_columns;
})()
;})(number_string,numbers,sum))
;
return clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.take.cljs$core$IFn$_invoke$arity$2((10),cljs.core.reverse(cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(add_list_columns,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.reverse,clojure.string.split.cljs$core$IFn$_invoke$arity$2(numbers,(new RegExp(""))))))));
});
goog.exportSymbol('euler.problems.problem_13', euler.problems.problem_13);
/**
 * The following iterative sequence is defined for the set of positive integers:
 * 
 *   n â†’ n/2 (n is even)
 *   n â†’ 3n + 1 (n is odd)
 * 
 *   Using the rule above and starting with 13, we generate the following sequence:
 * 
 *   13 â†’ 40 â†’ 20 â†’ 10 â†’ 5 â†’ 16 â†’ 8 â†’ 4 â†’ 2 â†’ 1
 *   It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
 * 
 *   Which starting number, under one million, produces the longest chain?
 * 
 *   NOTE: Once the chain starts the terms are allowed to go above one million.
 */
euler.problems.problem_14 = (function euler$problems$problem_14(){
var collatz_length = (function() {
var euler$problems$problem_14_$_collatz_length = null;
var euler$problems$problem_14_$_collatz_length__1 = (function (n){
return euler$problems$problem_14_$_collatz_length.cljs$core$IFn$_invoke$arity$2(n,(0));
});
var euler$problems$problem_14_$_collatz_length__2 = (function (n,length){
while(true){
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),n)){
return (length + (1));
} else {
if(cljs.core.even_QMARK_(n)){
var G__34291 = (n / (2));
var G__34292 = (length + (1));
n = G__34291;
length = G__34292;
continue;
} else {
if(cljs.core.odd_QMARK_(n)){
var G__34293 = (((3) * n) + (1));
var G__34294 = (length + (1));
n = G__34293;
length = G__34294;
continue;
} else {
return null;
}
}
}
break;
}
});
euler$problems$problem_14_$_collatz_length = function(n,length){
switch(arguments.length){
case 1:
return euler$problems$problem_14_$_collatz_length__1.call(this,n);
case 2:
return euler$problems$problem_14_$_collatz_length__2.call(this,n,length);
}
throw(new Error('Invalid arity: ' + (arguments.length - 1)));
};
euler$problems$problem_14_$_collatz_length.cljs$core$IFn$_invoke$arity$1 = euler$problems$problem_14_$_collatz_length__1;
euler$problems$problem_14_$_collatz_length.cljs$core$IFn$_invoke$arity$2 = euler$problems$problem_14_$_collatz_length__2;
return euler$problems$problem_14_$_collatz_length;
})()
;
var memory = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$n,null,cljs.core.cst$kw$length,null], null));
var seq__34283_34295 = cljs.core.seq(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(1000001)));
var chunk__34286_34296 = null;
var count__34287_34297 = (0);
var i__34288_34298 = (0);
while(true){
if((i__34288_34298 < count__34287_34297)){
var n_34299 = chunk__34286_34296.cljs$core$IIndexed$_nth$arity$2(null,i__34288_34298);
var length_34300 = collatz_length.cljs$core$IFn$_invoke$arity$1(n_34299);
if((length_34300 > cljs.core.cst$kw$length.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(memory)))){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(memory,cljs.core.assoc,cljs.core.cst$kw$n,n_34299,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$length,length_34300], 0));

cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.deref(memory)], 0));


var G__34301 = seq__34283_34295;
var G__34302 = chunk__34286_34296;
var G__34303 = count__34287_34297;
var G__34304 = (i__34288_34298 + (1));
seq__34283_34295 = G__34301;
chunk__34286_34296 = G__34302;
count__34287_34297 = G__34303;
i__34288_34298 = G__34304;
continue;
} else {
var G__34305 = seq__34283_34295;
var G__34306 = chunk__34286_34296;
var G__34307 = count__34287_34297;
var G__34308 = (i__34288_34298 + (1));
seq__34283_34295 = G__34305;
chunk__34286_34296 = G__34306;
count__34287_34297 = G__34307;
i__34288_34298 = G__34308;
continue;
}
} else {
var temp__5457__auto___34309 = cljs.core.seq(seq__34283_34295);
if(temp__5457__auto___34309){
var seq__34283_34310__$1 = temp__5457__auto___34309;
if(cljs.core.chunked_seq_QMARK_(seq__34283_34310__$1)){
var c__4319__auto___34311 = cljs.core.chunk_first(seq__34283_34310__$1);
var G__34312 = cljs.core.chunk_rest(seq__34283_34310__$1);
var G__34313 = c__4319__auto___34311;
var G__34314 = cljs.core.count(c__4319__auto___34311);
var G__34315 = (0);
seq__34283_34295 = G__34312;
chunk__34286_34296 = G__34313;
count__34287_34297 = G__34314;
i__34288_34298 = G__34315;
continue;
} else {
var n_34316 = cljs.core.first(seq__34283_34310__$1);
var length_34317 = collatz_length.cljs$core$IFn$_invoke$arity$1(n_34316);
if((length_34317 > cljs.core.cst$kw$length.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(memory)))){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(memory,cljs.core.assoc,cljs.core.cst$kw$n,n_34316,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$length,length_34317], 0));

cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.deref(memory)], 0));


var G__34318 = cljs.core.next(seq__34283_34310__$1);
var G__34319 = null;
var G__34320 = (0);
var G__34321 = (0);
seq__34283_34295 = G__34318;
chunk__34286_34296 = G__34319;
count__34287_34297 = G__34320;
i__34288_34298 = G__34321;
continue;
} else {
var G__34322 = cljs.core.next(seq__34283_34310__$1);
var G__34323 = null;
var G__34324 = (0);
var G__34325 = (0);
seq__34283_34295 = G__34322;
chunk__34286_34296 = G__34323;
count__34287_34297 = G__34324;
i__34288_34298 = G__34325;
continue;
}
}
} else {
}
}
break;
}

return cljs.core.cst$kw$n.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(memory));
});
goog.exportSymbol('euler.problems.problem_14', euler.problems.problem_14);
