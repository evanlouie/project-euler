(ns euler.problem-2
  (:require [clojure.core.match :refer [match]]))

(defn- fibn
  "Return the `n`th fibonacci number"
  ([n] (fibn n 0 1))
  ([n x y] (match [n]
             [0] x
             [1] y
             [_] (recur (dec n) y (+ x y)))))

(defn- fib-seq
  "Create a lazy sequence of fibonacci numbers starting with 1, 2, 3, 5, 8...
  The two starting seeds can be adjusted by providing `a` and `b`"
  ([] (fib-seq 0 1))
  ([a b] (let [next (+' a b)]
           (lazy-seq (cons next (fib-seq b next))))))

(defn problem-2
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
  []
  (->> (fib-seq)
       (filter even?)
       (take-while #(<= % 4000000))
       (reduce +')))

(defn -main []
  (time (println (problem-2))))
