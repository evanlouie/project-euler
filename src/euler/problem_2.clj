(ns euler.problem-2
  (:require [clojure.core.match :refer [match]]
            [clojure.spec.alpha :as s]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Specs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(s/fdef fibn
  :args (s/alt :unary (s/cat :n nat-int?)
               :binary (s/cat :n nat-int? :x nat-int? :y nat-int?))
  :ret nat-int?)

(s/fdef fibs
  :args (s/alt :non (s/cat)
               :binary (s/cat :a nat-int? :b nat-int?)))

(s/fdef fib
  :args (s/cat :n nat-int?)
  :ret (s/cat :n nat-int?))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Answer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fibn
  "return the `n`th fibonacci number"
  ([n] (fibn n 0 1))
  ([n fst snd] (match [n]
                 [0] fst
                 [1] snd
                 [_] (recur (dec n) snd (+' fst snd)))))

(defn- fibs
  "return a lazy-seq of fibonacci numbers `fst`, `snd` `fst+snd`...
  defaults to 1, 1, 2, 3..."
  ([] (fibs 1 1))
  ([fst snd] (lazy-seq (cons fst (fibs snd (+' fst snd))))))

(def fib (memoize (fn [n] (nth (fibs) n))))

(defn problem-2
  "each new term in the fibonacci sequence is generated by adding the previous two terms. by starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  by considering the terms in the fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
  []
  (->> (fibs 1 2)
       (filter even?)
       (take-while #(<= % 4000000))
       (reduce +')))

(defn -main []
  (time (println (problem-2))))
