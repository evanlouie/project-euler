(ns euler.problem-12)

(defn- triangles
  "Generates a lazy sequence of triangle numbers"
  ([] (triangles 1 0))
  ([n sum] (let [next-sum (+ sum n)]
             (lazy-seq (cons next-sum (triangles (inc n) next-sum))))))

(defn- factors
  "Return the list of factors of `n`"
  ([n] (reduce concat
               (for [x (range 1 (inc (Math/sqrt n)))
                     :when (zero? (rem n x))]
                 [x (/ n x)]))))

(defn problem-12
  "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?"
  []
  (let [running-max (atom {:n 0 :factor-count 0})]
    (->> (triangles)
         (map (fn [triangle]
                (let [f (factors triangle)
                      f-count (count f)
                      f-map {:n triangle :factor-count f-count}]
                  (when (> f-count (@running-max :factor-count))
                    (swap! running-max (fn [_] f-map))
                    (println @running-max))
                  f-map)))
         (filter (fn [{f-count :factor-count}] (> f-count 500)))
         (first)
         (:n))))

(defn -main []
  (time (println (problem-12)))
  (shutdown-agents))
