"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EulerProblem_1 = require("./EulerProblem");
class EulerProblem12 extends EulerProblem_1.AbstractEulerProblem {
    constructor() {
        super(...arguments);
        this.problemNumber = 12;
        this.question = `
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?`;
        this.answer = () => {
            const triangleNumber = (n) => {
                let sum = 0;
                for (let i = 1; i <= n; i++) {
                    sum += i;
                }
                return sum;
            };
            const factors = (n) => {
                if (n === 1) {
                    return [1];
                }
                const arr = [];
                let i = 1;
                let max = n;
                while (i < max) {
                    // i is a factor
                    if (n % i === 0) {
                        arr.push(i);
                        // if not square, get the quotient which is a factor as well
                        if (i !== n / i) {
                            arr.push(n / i);
                        }
                        max = n / i;
                    }
                    i++;
                }
                return arr.sort((a, b) => a - b);
            };
            let i = 1;
            while (factors(triangleNumber(i)).length < 500) {
                i++;
            }
            return triangleNumber(i).toString();
        };
    }
}
exports.default = EulerProblem12;
